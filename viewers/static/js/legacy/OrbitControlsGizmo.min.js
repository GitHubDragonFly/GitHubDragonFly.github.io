class OrbitControlsGizmo{constructor(orbitControls,options){options=Object.assign({size:90,padding:8,bubbleSizePrimary:8,bubbleSizeSecondary:6,lineWidth:2,fontSize:"12px",fontFamily:"arial",fontWeight:"bold",fontColor:"#222222",className:"obit-controls-gizmo",colors:{x:["#f73c3c","#942424"],y:["#6ccb26","#417a17"],z:["#178cf0","#0e5490"]}},options),this.lock=!1,this.lockX=!1,this.lockY=!1,this.update=()=>{if(!this.lock){camera.updateMatrix(),invRotMat.extractRotation(camera.matrix).getInverse(invRotMat.extractRotation(camera.matrix));for(let i=0,length=axes.length;i<length;i++)setAxisPosition(axes[i],invRotMat);axes.sort((a,b)=>a.position.z>b.position.z?1:-1),drawLayers(!0)}},this.dispose=()=>{orbit.removeEventListener("change",this.update),orbit.removeEventListener("start",()=>this.domElement.classList.add("inactive")),orbit.removeEventListener("end",()=>this.domElement.classList.remove("inactive")),this.domElement.removeEventListener("pointerdown",onPointerDown,!1),this.domElement.removeEventListener("pointerenter",onPointerEnter,!1),this.domElement.removeEventListener("pointermove",onPointerMove,!1),this.domElement.removeEventListener("click",onMouseClick,!1),window.removeEventListener("pointermove",onDrag,!1),window.removeEventListener("pointerup",onPointerUp,!1),this.domElement.remove()};const scoped=this,orbit=orbitControls,camera=orbitControls.object,invRotMat=new THREE.Matrix4,mouse=new THREE.Vector3,rotateStart=new THREE.Vector2,rotateEnd=new THREE.Vector2,rotateDelta=new THREE.Vector2,center=new THREE.Vector3(options.size/2,options.size/2,0),axes=createAxes();let selectedAxis=null,isDragging=!1,context,rect,orbitState;function createAxes(){const colors=options.colors,line=options.lineWidth,size={primary:options.bubbleSizePrimary,secondary:options.bubbleSizeSecondary};return[{axis:"x",direction:new THREE.Vector3(1,0,0),size:size.primary,color:colors.x,line:line,label:"X",position:new THREE.Vector3(0,0,0)},{axis:"y",direction:new THREE.Vector3(0,1,0),size:size.primary,color:colors.y,line:line,label:"Y",position:new THREE.Vector3(0,0,0)},{axis:"z",direction:new THREE.Vector3(0,0,1),size:size.primary,color:colors.z,line:line,label:"Z",position:new THREE.Vector3(0,0,0)},{axis:"-x",direction:new THREE.Vector3(-1,0,0),size:size.secondary,color:colors.x,position:new THREE.Vector3(0,0,0)},{axis:"-y",direction:new THREE.Vector3(0,-1,0),size:size.secondary,color:colors.y,position:new THREE.Vector3(0,0,0)},{axis:"-z",direction:new THREE.Vector3(0,0,-1),size:size.secondary,color:colors.z,position:new THREE.Vector3(0,0,0)}]}function createCanvas(){const canvas=document.createElement("canvas");return canvas.width=options.size,canvas.height=options.size,canvas.classList.add(options.className),canvas.addEventListener("pointerdown",onPointerDown,!1),canvas.addEventListener("pointerenter",onPointerEnter,!1),canvas.addEventListener("pointermove",onPointerMove,!1),canvas.addEventListener("click",onMouseClick,!1),context=canvas.getContext("2d"),canvas}function onPointerDown(e){rotateStart.set(e.clientX,e.clientY),orbitState=orbit.enabled,orbit.enabled=!1,window.addEventListener("pointermove",onDrag,!1),window.addEventListener("pointerup",onPointerUp,!1)}function onPointerUp(){setTimeout(()=>isDragging=!1,0),scoped.domElement.classList.remove("dragging"),orbit.enabled=orbitState,window.removeEventListener("pointermove",onDrag,!1),window.removeEventListener("pointerup",onPointerUp,!1)}function onPointerEnter(){rect=scoped.domElement.getBoundingClientRect()}function onPointerMove(e){if(isDragging||scoped.lock)return;const currentAxis=selectedAxis;selectedAxis=null,e&&mouse.set(e.clientX-rect.left,e.clientY-rect.top,0);for(let i=0,length=axes.length;i<length;i++){const distance=mouse.distanceTo(axes[i].position);distance<axes[i].size&&(selectedAxis=axes[i])}currentAxis!==selectedAxis&&drawLayers()}function onDrag(e){scoped.lock||(isDragging||scoped.domElement.classList.add("dragging"),isDragging=!0,selectedAxis=null,rotateEnd.set(e.clientX,e.clientY),rotateDelta.subVectors(rotateEnd,rotateStart).multiplyScalar(.5),scoped.lockX||orbit.rotateLeft(2*Math.PI*rotateDelta.x/scoped.domElement.height),scoped.lockY||orbit.rotateUp(2*Math.PI*rotateDelta.y/scoped.domElement.height),rotateStart.copy(rotateEnd),orbit.update())}function onMouseClick(){if(isDragging||!selectedAxis)return;const vec=selectedAxis.direction.clone(),distance=camera.position.distanceTo(orbit.target);vec.multiplyScalar(distance);const duration=400,start=performance.now(),maxAlpha=1;function loop(){const now=performance.now(),delta=now-start,alpha=Math.min(delta/400,1);if(camera.position.lerp(vec,alpha),orbit.update(),1!==alpha)return requestAnimationFrame(loop);onPointerMove()}loop(),selectedAxis=null}function drawCircle(p,radius=10,color="#FF0000"){context.beginPath(),context.arc(p.x,p.y,radius,0,2*Math.PI,!1),context.fillStyle=color,context.fill(),context.closePath()}function drawLine(p1,p2,width=1,color="#FF0000"){context.beginPath(),context.moveTo(p1.x,p1.y),context.lineTo(p2.x,p2.y),context.lineWidth=width,context.strokeStyle=color,context.stroke(),context.closePath()}function drawLayers(clear){clear&&context.clearRect(0,0,scoped.domElement.width,scoped.domElement.height);for(let i=0,length=axes.length;i<length;i++){const axis=axes[i],highlight=selectedAxis===axis,color=axis.position.z>=-.01?axis.color[0]:axis.color[1];axis.line&&drawLine(center,axis.position,axis.line,color),drawCircle(axis.position,axis.size,highlight?"#FFFFFF":color),axis.label&&(context.font=[options.fontWeight,options.fontSize,options.fontFamily].join(" "),context.fillStyle=options.fontColor,context.textBaseline="middle",context.textAlign="center",context.fillText(axis.label,axis.position.x,axis.position.y))}}function setAxisPosition(axis){const position=axis.direction.clone().applyMatrix4(invRotMat),size=axis.size;axis.position.set(position.x*(center.x-size/2-options.padding)+center.x,center.y-position.y*(center.y-size/2-options.padding),position.z)}orbit.addEventListener("change",this.update),orbit.addEventListener("start",()=>this.domElement.classList.add("inactive")),orbit.addEventListener("end",()=>this.domElement.classList.remove("inactive")),this.domElement=createCanvas(),this.update()}}