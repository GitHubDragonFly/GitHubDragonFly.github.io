THREE.LegacyJSONLoader=function(){function e(e){"boolean"==typeof e&&(e=void 0),this.manager=void 0!==e?e:THREE.DefaultLoadingManager;const a=new THREE.Loader(e);Object.assign(this,a),this.withCredentials=!1}return e.prototype=Object.assign(Object.create(THREE.Loader.prototype),{constructor:e,setResourcePath:function(e){this.resourcePath=e},load:function(e,a,s,r){var t=this,o=""===this.path?THREE.LoaderUtils.extractUrlBase(e):this.path,i=new THREE.FileLoader(this.manager);i.setPath(this.path),i.setWithCredentials(this.withCredentials),i.load(e,(function(e){try{var s=JSON.parse(e)}catch(e){return void(r&&r(e))}var i=s.metadata;if(void 0!==i){var p=i.type;if(void 0!==p&&"object"===p.toLowerCase())return void(r&&r())}var n=t.parse(s,o);a({geometry:n.geometry,bones:n.geometry.bones,materials:n.materials})}),s,r)},parse:function(){var e={NoBlending:THREE.NoBlending,NormalBlending:THREE.NormalBlending,AdditiveBlending:THREE.AdditiveBlending,SubtractiveBlending:THREE.SubtractiveBlending,MultiplyBlending:THREE.MultiplyBlending,CustomBlending:THREE.CustomBlending},a=new THREE.Color,s=new THREE.TextureLoader,r=new THREE.MaterialLoader;function t(s,t,i,p){var n={},c={uuid:THREE.Math.generateUUID(),type:"MeshLambertMaterial"};for(var m in s){var l=s[m];switch(m){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":c.name=l;break;case"blending":c.blending=e[l];break;case"colorAmbient":case"mapAmbient":break;case"colorDiffuse":c.color=a.fromArray(l).getHex();break;case"colorSpecular":c.specular=a.fromArray(l).getHex();break;case"colorEmissive":c.emissive=a.fromArray(l).getHex();break;case"specularCoef":c.shininess=l;break;case"shading":"basic"===l.toLowerCase()&&(c.type="MeshBasicMaterial"),"phong"===l.toLowerCase()&&(c.type="MeshPhongMaterial"),"standard"===l.toLowerCase()&&(c.type="MeshStandardMaterial");break;case"mapDiffuse":c.map=o(l,s.mapDiffuseRepeat,s.mapDiffuseOffset,s.mapDiffuseWrap,s.mapDiffuseAnisotropy,n,t,i,p);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":c.emissiveMap=o(l,s.mapEmissiveRepeat,s.mapEmissiveOffset,s.mapEmissiveWrap,s.mapEmissiveAnisotropy,n,t,i,p);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":c.lightMap=o(l,s.mapLightRepeat,s.mapLightOffset,s.mapLightWrap,s.mapLightAnisotropy,n,t,i,p);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":c.aoMap=o(l,s.mapAORepeat,s.mapAOOffset,s.mapAOWrap,s.mapAOAnisotropy,n,t,i,p);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":c.bumpMap=o(l,s.mapBumpRepeat,s.mapBumpOffset,s.mapBumpWrap,s.mapBumpAnisotropy,n,t,i,p);break;case"mapBumpScale":c.bumpScale=l;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":c.normalMap=o(l,s.mapNormalRepeat,s.mapNormalOffset,s.mapNormalWrap,s.mapNormalAnisotropy,n,t,i,p);break;case"mapNormalFactor":c.normalScale=l;break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":c.specularMap=o(l,s.mapSpecularRepeat,s.mapSpecularOffset,s.mapSpecularWrap,s.mapSpecularAnisotropy,n,t,i,p);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":c.metalnessMap=o(l,s.mapMetalnessRepeat,s.mapMetalnessOffset,s.mapMetalnessWrap,s.mapMetalnessAnisotropy,n,t,i,p);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":c.roughnessMap=o(l,s.mapRoughnessRepeat,s.mapRoughnessOffset,s.mapRoughnessWrap,s.mapRoughnessAnisotropy,n,t,i,p);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":c.alphaMap=o(l,s.mapAlphaRepeat,s.mapAlphaOffset,s.mapAlphaWrap,s.mapAlphaAnisotropy,n,t,i,p);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":c.side=THREE.BackSide;break;case"doubleSided":c.side=THREE.DoubleSide;break;case"transparency":c.opacity=l;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":c[m]=l;break;case"vertexColors":!0===l&&(c.vertexColors=THREE.VertexColors),"face"===l&&(c.vertexColors=THREE.FaceColors);break;default:break}}return"MeshBasicMaterial"===c.type&&delete c.emissive,"MeshPhongMaterial"!==c.type&&delete c.specular,c.opacity<1&&(c.transparent=!0),r.setTextures(n),r.parse(c)}function o(e,a,r,t,o,i,p,n,c){var m,l,h;if(!0===p.includes(",")){let a=p.split(",");for(let s=0;s<a.length;s+=2)e!==a[s]&&!0!==e.endsWith(a[s])||(e=a[s+1],a[s].toLowerCase().endsWith(".dds")?THREE.DDSLoader&&(l=new THREE.DDSLoader(this.manager)):a[s].toLowerCase().endsWith(".tga")&&THREE.TGALoader&&(l=new THREE.TGALoader(this.manager)));m=e}else m=p+e;if(null==l){let e=m.toLowerCase();e.endsWith(".tga")?THREE.TGALoader&&(l=new THREE.TGALoader(this.manager)):e.endsWith(".dds")?THREE.DDSLoader&&(l=new THREE.DDSLoader(this.manager)):l=c.getHandler(m)}null!==l?h=l.load(m):(s.setCrossOrigin(n),h=s.load(m)),void 0!==a&&(h.repeat.fromArray(a),1!==a[0]&&(h.wrapS=THREE.RepeatWrapping),1!==a[1]&&(h.wrapT=THREE.RepeatWrapping)),void 0!==r&&h.offset.fromArray(r),void 0!==t&&("repeat"===t[0]&&(h.wrapS=THREE.RepeatWrapping),"mirror"===t[0]&&(h.wrapS=THREE.MirroredRepeatWrapping),"repeat"===t[1]&&(h.wrapT=THREE.RepeatWrapping),"mirror"===t[1]&&(h.wrapT=THREE.MirroredRepeatWrapping)),void 0!==o&&(h.anisotropy=o);var f=THREE.Math.generateUUID();return i[f]=h,f}return function(e,a){void 0!==e.data&&(e=e.data),void 0!==e.scale?e.scale=1/e.scale:e.scale=1;let s=new THREE.Geometry;!function(e,a){function s(e,a){return e&1<<a}var r,t,o,i,p,n,c,m,l,h,f,u,g,E,d,v,R,T,b,H,A,y,k,W,w,M,C,O=e.faces,x=e.vertices,L=e.normals,S=e.colors,B=e.scale,D=0;if(void 0!==e.uvs){for(r=0;r<e.uvs.length;r++)e.uvs[r].length&&D++;for(r=0;r<D;r++)a.faceVertexUvs[r]=[]}for(i=0,p=x.length;i<p;)(T=new THREE.Vector3).x=x[i++]*B,T.y=x[i++]*B,T.z=x[i++]*B,a.vertices.push(T);for(i=0,p=O.length;i<p;)if(f=s(h=O[i++],0),u=s(h,1),g=s(h,3),E=s(h,4),d=s(h,5),v=s(h,6),R=s(h,7),f){if((H=new THREE.Face3).a=O[i],H.b=O[i+1],H.c=O[i+3],(A=new THREE.Face3).a=O[i+1],A.b=O[i+2],A.c=O[i+3],i+=4,u&&(l=O[i++],H.materialIndex=l,A.materialIndex=l),o=a.faces.length,g)for(r=0;r<D;r++)for(W=e.uvs[r],a.faceVertexUvs[r][o]=[],a.faceVertexUvs[r][o+1]=[],t=0;t<4;t++)M=W[2*(m=O[i++])],C=W[2*m+1],w=new THREE.Vector2(M,C),2!==t&&a.faceVertexUvs[r][o].push(w),0!==t&&a.faceVertexUvs[r][o+1].push(w);if(E&&(c=3*O[i++],H.normal.set(L[c++],L[c++],L[c]),A.normal.copy(H.normal)),d)for(r=0;r<4;r++)c=3*O[i++],k=new THREE.Vector3(L[c++],L[c++],L[c]),2!==r&&H.vertexNormals.push(k),0!==r&&A.vertexNormals.push(k);if(v&&(y=S[n=O[i++]],H.color.setHex(y),A.color.setHex(y)),R)for(r=0;r<4;r++)y=S[n=O[i++]],2!==r&&H.vertexColors.push(new THREE.Color(y)),0!==r&&A.vertexColors.push(new THREE.Color(y));a.faces.push(H),a.faces.push(A)}else{if((b=new THREE.Face3).a=O[i++],b.b=O[i++],b.c=O[i++],u&&(l=O[i++],b.materialIndex=l),o=a.faces.length,g)for(r=0;r<D;r++)for(W=e.uvs[r],a.faceVertexUvs[r][o]=[],t=0;t<3;t++)M=W[2*(m=O[i++])],C=W[2*m+1],w=new THREE.Vector2(M,C),a.faceVertexUvs[r][o].push(w);if(E&&(c=3*O[i++],b.normal.set(L[c++],L[c++],L[c])),d)for(r=0;r<3;r++)c=3*O[i++],k=new THREE.Vector3(L[c++],L[c++],L[c]),b.vertexNormals.push(k);if(v&&(n=O[i++],b.color.setHex(S[n])),R)for(r=0;r<3;r++)n=O[i++],b.vertexColors.push(new THREE.Color(S[n]));a.faces.push(b)}}(e,s),function(e,a){var s=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var r=0,t=e.skinWeights.length;r<t;r+=s){var o=e.skinWeights[r],i=s>1?e.skinWeights[r+1]:0,p=s>2?e.skinWeights[r+2]:0,n=s>3?e.skinWeights[r+3]:0;a.skinWeights.push(new THREE.Vector4(o,i,p,n))}if(e.skinIndices)for(r=0,t=e.skinIndices.length;r<t;r+=s){var c=e.skinIndices[r],m=s>1?e.skinIndices[r+1]:0,l=s>2?e.skinIndices[r+2]:0,h=s>3?e.skinIndices[r+3]:0;a.skinIndices.push(new THREE.Vector4(c,m,l,h))}a.bones=e.bones,a.bones&&a.bones.length>0&&(a.skinWeights.length!==a.skinIndices.length||(a.skinIndices.length,a.vertices.length))}(e,s),function(e,a){var s=e.scale;if(void 0!==e.morphTargets)for(var r=0,t=e.morphTargets.length;r<t;r++){a.morphTargets[r]={},a.morphTargets[r].name=e.morphTargets[r].name,a.morphTargets[r].vertices=[];for(var o=a.morphTargets[r].vertices,i=e.morphTargets[r].vertices,p=0,n=i.length;p<n;p+=3){var c=new THREE.Vector3;c.x=i[p]*s,c.y=i[p+1]*s,c.z=i[p+2]*s,o.push(c)}}if(void 0!==e.morphColors&&e.morphColors.length>0){var m=a.faces,l=e.morphColors[0].colors;for(r=0,t=m.length;r<t;r++)m[r].color.fromArray(l,3*r)}}(e,s),function(e,a){var s=[],r=[];void 0!==e.animation&&r.push(e.animation),void 0!==e.animations&&(e.animations.length?r=r.concat(e.animations):r.push(e.animations));for(var t=0;t<r.length;t++){var o=THREE.AnimationClip.parseAnimation(r[t],a.bones);o&&s.push(o)}if(a.morphTargets){let e=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(a.morphTargets,10);s=s.concat(e)}else if(a.morphAttributes.position){let e=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(a.morphAttributes.position,10);s=s.concat(e)}s.length>0&&(a.animations=s)}(e,s),s.computeFaceNormals(),s.computeBoundingSphere();let r,o=!1;return void 0===e.materials||0===e.materials.length?o=!0:r=function(e,a,s,r){for(var o=[],i=0;i<e.length;++i)o[i]=t(e[i],a,s,r);return o}(e.materials,this.resourcePath||a,this.crossOrigin,this.manager),!0===o?{geometry:s}:{geometry:s,materials:r}}}()}),e}();