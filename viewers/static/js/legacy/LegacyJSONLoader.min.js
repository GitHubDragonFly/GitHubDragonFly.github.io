THREE.LegacyJSONLoader=function(){function LegacyJSONLoader(manager){"boolean"==typeof manager&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),manager=void 0),this.manager=void 0!==manager?manager:THREE.DefaultLoadingManager;const legacy_loader=new THREE.Loader(manager);Object.assign(this,legacy_loader),this.withCredentials=!1}return LegacyJSONLoader.prototype=Object.assign(Object.create(THREE.Loader.prototype),{constructor:LegacyJSONLoader,setResourcePath:function(resource_path){this.resourcePath=resource_path},load:function(url,onLoad,onProgress,onError){var scope=this,path=""===this.path?THREE.LoaderUtils.extractUrlBase(url):this.path,loader=new THREE.FileLoader(this.manager);loader.setPath(this.path),loader.setWithCredentials(this.withCredentials),loader.load(url,(function(text){try{var json=JSON.parse(text)}catch(error){return console.error(error),void(onError&&onError(error))}var metadata=json.metadata;if(void 0!==metadata){var type=metadata.type;if(void 0!==type&&"object"===type.toLowerCase())return void(onError?onError():console.error("THREE.JSONLoader: "+url+" should be loaded with THREE.ObjectLoader instead."))}var object=scope.parse(json,path);onLoad({geometry:object.geometry,bones:object.geometry.bones,materials:object.materials})}),onProgress,onError)},parse:function(){var _BlendingMode={NoBlending:THREE.NoBlending,NormalBlending:THREE.NormalBlending,AdditiveBlending:THREE.AdditiveBlending,SubtractiveBlending:THREE.SubtractiveBlending,MultiplyBlending:THREE.MultiplyBlending,CustomBlending:THREE.CustomBlending},_color=new THREE.Color,_textureLoader=new THREE.TextureLoader,_materialLoader=new THREE.MaterialLoader;function initMaterials(materials,texturePath,crossOrigin,manager){for(var array=[],i=0;i<materials.length;++i)array[i]=createMaterial(materials[i],texturePath,crossOrigin,manager);return array}function createMaterial(m,texturePath,crossOrigin,manager){var textures={},json={uuid:THREE.Math.generateUUID(),type:"MeshLambertMaterial"};for(var name in m){var value=m[name];switch(name){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":json.name=value;break;case"blending":json.blending=_BlendingMode[value];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.LegacyJSONLoader.createMaterial:",name,"is no longer supported.");break;case"colorDiffuse":json.color=_color.fromArray(value).getHex();break;case"colorSpecular":json.specular=_color.fromArray(value).getHex();break;case"colorEmissive":json.emissive=_color.fromArray(value).getHex();break;case"specularCoef":json.shininess=value;break;case"shading":"basic"===value.toLowerCase()&&(json.type="MeshBasicMaterial"),"phong"===value.toLowerCase()&&(json.type="MeshPhongMaterial"),"standard"===value.toLowerCase()&&(json.type="MeshStandardMaterial");break;case"mapDiffuse":json.map=loadTexture(value,m.mapDiffuseRepeat,m.mapDiffuseOffset,m.mapDiffuseWrap,m.mapDiffuseAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":json.emissiveMap=loadTexture(value,m.mapEmissiveRepeat,m.mapEmissiveOffset,m.mapEmissiveWrap,m.mapEmissiveAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":json.lightMap=loadTexture(value,m.mapLightRepeat,m.mapLightOffset,m.mapLightWrap,m.mapLightAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":json.aoMap=loadTexture(value,m.mapAORepeat,m.mapAOOffset,m.mapAOWrap,m.mapAOAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":json.bumpMap=loadTexture(value,m.mapBumpRepeat,m.mapBumpOffset,m.mapBumpWrap,m.mapBumpAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapBumpScale":json.bumpScale=value;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":json.normalMap=loadTexture(value,m.mapNormalRepeat,m.mapNormalOffset,m.mapNormalWrap,m.mapNormalAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapNormalFactor":json.normalScale=value;break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":json.specularMap=loadTexture(value,m.mapSpecularRepeat,m.mapSpecularOffset,m.mapSpecularWrap,m.mapSpecularAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":json.metalnessMap=loadTexture(value,m.mapMetalnessRepeat,m.mapMetalnessOffset,m.mapMetalnessWrap,m.mapMetalnessAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":json.roughnessMap=loadTexture(value,m.mapRoughnessRepeat,m.mapRoughnessOffset,m.mapRoughnessWrap,m.mapRoughnessAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":json.alphaMap=loadTexture(value,m.mapAlphaRepeat,m.mapAlphaOffset,m.mapAlphaWrap,m.mapAlphaAnisotropy,textures,texturePath,crossOrigin,manager);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":json.side=THREE.BackSide;break;case"doubleSided":json.side=THREE.DoubleSide;break;case"transparency":console.warn("THREE.LegacyJSONLoader.createMaterial: transparency has been renamed to opacity"),json.opacity=value;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":json[name]=value;break;case"vertexColors":!0===value&&(json.vertexColors=THREE.VertexColors),"face"===value&&(json.vertexColors=THREE.FaceColors);break;default:console.error("THREE.LegacyJSONLoader.createMaterial: Unsupported",name,value)}}return"MeshBasicMaterial"===json.type&&delete json.emissive,"MeshPhongMaterial"!==json.type&&delete json.specular,json.opacity<1&&(json.transparent=!0),_materialLoader.setTextures(textures),_materialLoader.parse(json)}function loadTexture(path,repeat,offset,wrap,anisotropy,textures,texturePath,crossOrigin,manager){var fullPath,loader,texture;if(!0===texturePath.includes(",")){let blobs=texturePath.split(",");for(let i=0;i<blobs.length;i+=2)path!==blobs[i]&&!0!==path.endsWith(blobs[i])||(path=blobs[i+1],blobs[i].toLowerCase().endsWith(".dds")?THREE.DDSLoader&&(loader=new THREE.DDSLoader(this.manager)):blobs[i].toLowerCase().endsWith(".tga")&&THREE.TGALoader&&(loader=new THREE.TGALoader(this.manager)));fullPath=path}else fullPath=texturePath+path;if(null==loader){let fp=fullPath.toLowerCase();fp.endsWith(".tga")?THREE.TGALoader&&(loader=new THREE.TGALoader(this.manager)):fp.endsWith(".dds")?THREE.DDSLoader&&(loader=new THREE.DDSLoader(this.manager)):loader=manager.getHandler(fullPath)}null!==loader?texture=loader.load(fullPath):(_textureLoader.setCrossOrigin(crossOrigin),texture=_textureLoader.load(fullPath)),void 0!==repeat&&(texture.repeat.fromArray(repeat),1!==repeat[0]&&(texture.wrapS=THREE.RepeatWrapping),1!==repeat[1]&&(texture.wrapT=THREE.RepeatWrapping)),void 0!==offset&&texture.offset.fromArray(offset),void 0!==wrap&&("repeat"===wrap[0]&&(texture.wrapS=THREE.RepeatWrapping),"mirror"===wrap[0]&&(texture.wrapS=THREE.MirroredRepeatWrapping),"repeat"===wrap[1]&&(texture.wrapT=THREE.RepeatWrapping),"mirror"===wrap[1]&&(texture.wrapT=THREE.MirroredRepeatWrapping)),void 0!==anisotropy&&(texture.anisotropy=anisotropy);var uuid=THREE.Math.generateUUID();return textures[uuid]=texture,uuid}function parseModel(json,geometry){function isBitSet(value,position){return value&1<<position}var i,j,fi,offset,zLength,colorIndex,normalIndex,uvIndex,materialIndex,type,isQuad,hasMaterial,hasFaceVertexUv,hasFaceNormal,hasFaceVertexNormal,hasFaceColor,hasFaceVertexColor,vertex,face,faceA,faceB,hex,normal,uvLayer,uv,u,v,faces=json.faces,vertices=json.vertices,normals=json.normals,colors=json.colors,scale=json.scale,nUvLayers=0;if(void 0!==json.uvs){for(i=0;i<json.uvs.length;i++)json.uvs[i].length&&nUvLayers++;for(i=0;i<nUvLayers;i++)geometry.faceVertexUvs[i]=[]}for(offset=0,zLength=vertices.length;offset<zLength;)(vertex=new THREE.Vector3).x=vertices[offset++]*scale,vertex.y=vertices[offset++]*scale,vertex.z=vertices[offset++]*scale,geometry.vertices.push(vertex);for(offset=0,zLength=faces.length;offset<zLength;)if(isQuad=isBitSet(type=faces[offset++],0),hasMaterial=isBitSet(type,1),hasFaceVertexUv=isBitSet(type,3),hasFaceNormal=isBitSet(type,4),hasFaceVertexNormal=isBitSet(type,5),hasFaceColor=isBitSet(type,6),hasFaceVertexColor=isBitSet(type,7),isQuad){if((faceA=new THREE.Face3).a=faces[offset],faceA.b=faces[offset+1],faceA.c=faces[offset+3],(faceB=new THREE.Face3).a=faces[offset+1],faceB.b=faces[offset+2],faceB.c=faces[offset+3],offset+=4,hasMaterial&&(materialIndex=faces[offset++],faceA.materialIndex=materialIndex,faceB.materialIndex=materialIndex),fi=geometry.faces.length,hasFaceVertexUv)for(i=0;i<nUvLayers;i++)for(uvLayer=json.uvs[i],geometry.faceVertexUvs[i][fi]=[],geometry.faceVertexUvs[i][fi+1]=[],j=0;j<4;j++)u=uvLayer[2*(uvIndex=faces[offset++])],v=uvLayer[2*uvIndex+1],uv=new THREE.Vector2(u,v),2!==j&&geometry.faceVertexUvs[i][fi].push(uv),0!==j&&geometry.faceVertexUvs[i][fi+1].push(uv);if(hasFaceNormal&&(normalIndex=3*faces[offset++],faceA.normal.set(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]),faceB.normal.copy(faceA.normal)),hasFaceVertexNormal)for(i=0;i<4;i++)normalIndex=3*faces[offset++],normal=new THREE.Vector3(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]),2!==i&&faceA.vertexNormals.push(normal),0!==i&&faceB.vertexNormals.push(normal);if(hasFaceColor&&(hex=colors[colorIndex=faces[offset++]],faceA.color.setHex(hex),faceB.color.setHex(hex)),hasFaceVertexColor)for(i=0;i<4;i++)hex=colors[colorIndex=faces[offset++]],2!==i&&faceA.vertexColors.push(new THREE.Color(hex)),0!==i&&faceB.vertexColors.push(new THREE.Color(hex));geometry.faces.push(faceA),geometry.faces.push(faceB)}else{if((face=new THREE.Face3).a=faces[offset++],face.b=faces[offset++],face.c=faces[offset++],hasMaterial&&(materialIndex=faces[offset++],face.materialIndex=materialIndex),fi=geometry.faces.length,hasFaceVertexUv)for(i=0;i<nUvLayers;i++)for(uvLayer=json.uvs[i],geometry.faceVertexUvs[i][fi]=[],j=0;j<3;j++)u=uvLayer[2*(uvIndex=faces[offset++])],v=uvLayer[2*uvIndex+1],uv=new THREE.Vector2(u,v),geometry.faceVertexUvs[i][fi].push(uv);if(hasFaceNormal&&(normalIndex=3*faces[offset++],face.normal.set(normals[normalIndex++],normals[normalIndex++],normals[normalIndex])),hasFaceVertexNormal)for(i=0;i<3;i++)normalIndex=3*faces[offset++],normal=new THREE.Vector3(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]),face.vertexNormals.push(normal);if(hasFaceColor&&(colorIndex=faces[offset++],face.color.setHex(colors[colorIndex])),hasFaceVertexColor)for(i=0;i<3;i++)colorIndex=faces[offset++],face.vertexColors.push(new THREE.Color(colors[colorIndex]));geometry.faces.push(face)}}function parseSkin(json,geometry){var influencesPerVertex=void 0!==json.influencesPerVertex?json.influencesPerVertex:2;if(json.skinWeights)for(var i=0,l=json.skinWeights.length;i<l;i+=influencesPerVertex){var x=json.skinWeights[i],y=influencesPerVertex>1?json.skinWeights[i+1]:0,z=influencesPerVertex>2?json.skinWeights[i+2]:0,w=influencesPerVertex>3?json.skinWeights[i+3]:0;geometry.skinWeights.push(new THREE.Vector4(x,y,z,w))}if(json.skinIndices)for(var i=0,l=json.skinIndices.length;i<l;i+=influencesPerVertex){var a=json.skinIndices[i],b=influencesPerVertex>1?json.skinIndices[i+1]:0,c=influencesPerVertex>2?json.skinIndices[i+2]:0,d=influencesPerVertex>3?json.skinIndices[i+3]:0;geometry.skinIndices.push(new THREE.Vector4(a,b,c,d))}geometry.bones=json.bones,geometry.bones&&geometry.bones.length>0&&(geometry.skinWeights.length!==geometry.skinIndices.length||geometry.skinIndices.length!==geometry.vertices.length)&&console.warn("When skinning, number of vertices ("+geometry.vertices.length+"), skinIndices ("+geometry.skinIndices.length+"), and skinWeights ("+geometry.skinWeights.length+") should match.")}function parseMorphing(json,geometry){var scale=json.scale;if(void 0!==json.morphTargets)for(var i=0,l=json.morphTargets.length;i<l;i++){geometry.morphTargets[i]={},geometry.morphTargets[i].name=json.morphTargets[i].name,geometry.morphTargets[i].vertices=[];for(var dstVertices=geometry.morphTargets[i].vertices,srcVertices=json.morphTargets[i].vertices,v=0,vl=srcVertices.length;v<vl;v+=3){var vertex=new THREE.Vector3;vertex.x=srcVertices[v]*scale,vertex.y=srcVertices[v+1]*scale,vertex.z=srcVertices[v+2]*scale,dstVertices.push(vertex)}}if(void 0!==json.morphColors&&json.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');for(var faces=geometry.faces,morphColors=json.morphColors[0].colors,i=0,l=faces.length;i<l;i++)faces[i].color.fromArray(morphColors,3*i)}}function parseAnimations(json,geometry){var outputAnimations=[],animations=[];void 0!==json.animation&&animations.push(json.animation),void 0!==json.animations&&(json.animations.length?animations=animations.concat(json.animations):animations.push(json.animations));for(var i=0;i<animations.length;i++){var clip=THREE.AnimationClip.parseAnimation(animations[i],geometry.bones);clip&&outputAnimations.push(clip)}if(geometry.morphTargets){let morphAnimationClips=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets,10);outputAnimations=outputAnimations.concat(morphAnimationClips)}else if(geometry.morphAttributes.position){let morphAnimationClips=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphAttributes.position,10);outputAnimations=outputAnimations.concat(morphAnimationClips)}outputAnimations.length>0&&(geometry.animations=outputAnimations)}return function parse(json,path){void 0!==json.data&&(json=json.data),void 0!==json.scale?json.scale=1/json.scale:json.scale=1;let geometry=new THREE.Geometry;parseModel(json,geometry),parseSkin(json,geometry),parseMorphing(json,geometry),parseAnimations(json,geometry),geometry.computeFaceNormals(),geometry.computeBoundingSphere();let geometry_only=!1,materials;return void 0===json.materials||0===json.materials.length?geometry_only=!0:materials=initMaterials(json.materials,this.resourcePath||path,this.crossOrigin,this.manager),!0===geometry_only?{geometry:geometry}:{geometry:geometry,materials:materials}}}()}),LegacyJSONLoader}();