!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.obj2prwm=e()}}((function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,(function(e){var n=t[o][1][e];return s(n||e)}),l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){"use strict";var objParser=require("wavefront-obj-parser"),computeNormals=require("./utils/compute-normals"),prwm=require("prwm");function serializeIndexed(objData,useColors,usePositions,useNormals,useUvs){var nbPolygons=objData.vertexPositionIndices.length/4,indicesMapping={},colors=[],indices=[],vertices=[],normals=[],uvs=[],i,k,colorIndex,vertexIndex,normalIndex,uvIndex,mapped,index,nextIndex=0,mustGenerateNewNormals=useNormals&&(!objData.vertexNormals||0===objData.vertexNormals.length);for(i=0;i<nbPolygons;i++)for(k=0;k<3;k++)colorIndex=objData.vertexColors[4*i+k],vertexIndex=objData.vertexPositionIndices[4*i+k],normalIndex=objData.vertexPositionIndices[4*i+k],uvIndex=objData.vertexUVIndices[4*i+k],void 0===(index=indicesMapping[mapped=(useColors?colorIndex+":":":")+(usePositions?vertexIndex+":":":")+(useNormals?normalIndex+":":":")+(useUvs?uvIndex+":":":")])&&(index=nextIndex,indicesMapping[mapped]=index,nextIndex++,useColors&&colors.push(objData.vertexColors[3*vertexIndex],objData.vertexColors[3*vertexIndex+1],objData.vertexColors[3*vertexIndex+2]),usePositions&&vertices.push(objData.vertexPositions[3*vertexIndex],objData.vertexPositions[3*vertexIndex+1],objData.vertexPositions[3*vertexIndex+2]),useNormals&&!mustGenerateNewNormals&&normals.push(objData.vertexNormals[3*normalIndex],objData.vertexNormals[3*normalIndex+1],objData.vertexNormals[3*normalIndex+2]),useUvs&&uvs.push(objData.vertexUVs[2*uvIndex],objData.vertexUVs[2*uvIndex+1])),indices.push(index);return mustGenerateNewNormals&&computeNormals(indices,vertices,normals),{colors:colors,indices:indices,vertices:vertices,normals:normals,uvs:uvs}}function serializeNonIndexed(objData,useColors,usePositions,useNormals,useUvs){var nbPolygons=objData.vertexPositionIndices.length/4,colors=[],vertices=[],normals=[],uvs=[],i,k,colorIndex,vertexIndex,normalIndex,uvIndex,mustGenerateNewNormals=useNormals&&(!objData.vertexNormals||0===objData.vertexNormals.length);for(i=0;i<nbPolygons;i++)for(k=0;k<3;k++)useColors&&(colorIndex=objData.vertexColors[4*i+k],colors.push(objData.vertexColors[3*colorIndex],objData.vertexColors[3*colorIndex+1],objData.vertexColors[3*colorIndex+2])),usePositions&&(vertexIndex=objData.vertexPositionIndices[4*i+k],vertices.push(objData.vertexPositions[3*vertexIndex],objData.vertexPositions[3*vertexIndex+1],objData.vertexPositions[3*vertexIndex+2])),useNormals&&!mustGenerateNewNormals&&(normalIndex=objData.vertexNormalIndices[4*i+k],normals.push(objData.vertexNormals[3*normalIndex],objData.vertexNormals[3*normalIndex+1],objData.vertexNormals[3*normalIndex+2])),useUvs&&(uvIndex=objData.vertexUVIndices[4*i+k],uvs.push(objData.vertexUVs[2*uvIndex],objData.vertexUVs[2*uvIndex+1]));return mustGenerateNewNormals&&computeNormals(null,vertices,normals),{colors:colors,indices:null,vertices:vertices,normals:normals,uvs:uvs}}var nbVertices=null;module.exports={convert:function(objString,options){var log=options.quiet?function noop(){}:function log(s){console.log(s)};log(" * Parsing WaveFront OBJ data");var objData=objParser(objString);log(" * Formatting data");var serialized=options.indexed?serializeIndexed(objData,options.colors,options.positions,options.normals,options.uvs):serializeNonIndexed(objData,options.colors,options.positions,options.normals,options.uvs),attributes={};return nbVertices=0,options.colors&&(attributes.color={cardinality:3,normalized:!1,values:new Float32Array(serialized.colors)},nbVertices=serialized.colors.length/3),options.positions&&(attributes.position={cardinality:3,normalized:!1,values:new Float32Array(serialized.vertices)},nbVertices=serialized.vertices.length/3),options.normals&&(attributes.normal={cardinality:3,normalized:!1,values:new Float32Array(serialized.normals)},nbVertices=serialized.normals.length/3),options.uvs&&(attributes.uv={cardinality:2,normalized:!1,values:new Float32Array(serialized.uvs)},nbVertices=serialized.uvs.length/2),prwm.encode(attributes,serialized.indices?nbVertices>65535?new Uint32Array(serialized.indices):new Uint16Array(serialized.indices):null,options.bigEndian)},getNumberOfVertices:function(){return nbVertices}}},{"./utils/compute-normals":8,prwm:2,"wavefront-obj-parser":7}],2:[function(require,module,exports){"use strict";var attributeTypes=require("./prwm/attribute-types");module.exports={version:1,Int:attributeTypes.Int,Float:attributeTypes.Float,isBigEndianPlatform:require("./utils/is-big-endian-platform"),encode:require("./prwm/encode"),decode:require("./prwm/decode")}},{"./prwm/attribute-types":3,"./prwm/decode":4,"./prwm/encode":5,"./utils/is-big-endian-platform":6}],3:[function(require,module,exports){"use strict";module.exports={Float:0,Int:1}},{}],4:[function(require,module,exports){"use strict";var isBigEndianPlatform=require("../utils/is-big-endian-platform"),InvertedEncodingTypes=[null,Float32Array,null,Int8Array,Int16Array,null,Int32Array,Uint8Array,Uint16Array,null,Uint32Array],getMethods={Uint16Array:"getUint16",Uint32Array:"getUint32",Int16Array:"getInt16",Int32Array:"getInt32",Float32Array:"getFloat32"};function copyFromBuffer(sourceArrayBuffer,viewType,position,length,fromBigEndian){var bytesPerElement=viewType.BYTES_PER_ELEMENT,result;if(fromBigEndian===isBigEndianPlatform()||1===bytesPerElement)result=new viewType(sourceArrayBuffer,position,length);else{var readView=new DataView(sourceArrayBuffer,position,length*bytesPerElement),getMethod=getMethods[viewType.name],littleEndian=!fromBigEndian;result=new viewType(length);for(var i=0;i<length;i++)result[i]=readView[getMethod](i*bytesPerElement,littleEndian)}return result}function decode(buffer,offset){offset=offset||0;var array=new Uint8Array(buffer,offset),version=array[0],flags=array[1],indexedGeometry=!!(flags>>7),indicesType=flags>>6&1,bigEndian=1==(flags>>5&1),attributesNumber=31&flags,valuesNumber=0,indicesNumber=0;if(bigEndian?(valuesNumber=(array[2]<<16)+(array[3]<<8)+array[4],indicesNumber=(array[5]<<16)+(array[6]<<8)+array[7]):(valuesNumber=array[2]+(array[3]<<8)+(array[4]<<16),indicesNumber=array[5]+(array[6]<<8)+(array[7]<<16)),offset/4%1!=0)throw new Error("PRWM decoder: Offset should be a multiple of 4, received "+offset);if(0===version)throw new Error("PRWM decoder: Invalid format version: 0");if(1!==version)throw new Error("PRWM decoder: Unsupported format version: "+version);if(!indexedGeometry){if(0!==indicesType)throw new Error("PRWM decoder: Indices type must be set to 0 for non-indexed geometries");if(0!==indicesNumber)throw new Error("PRWM decoder: Number of indices must be set to 0 for non-indexed geometries")}var pos=8,attributes={},attributeName,char,attributeNormalized,attributeType,cardinality,encodingType,arrayType,values,i;for(i=0;i<attributesNumber;i++){for(attributeName="";pos<array.length&&(char=array[pos],pos++,0!==char);)attributeName+=String.fromCharCode(char);attributeType=(flags=array[pos])>>7&1,attributeNormalized=!!(flags>>6&1),cardinality=1+(flags>>4&3),pos++,values=copyFromBuffer(buffer,arrayType=InvertedEncodingTypes[encodingType=15&flags],(pos=4*Math.ceil(pos/4))+offset,cardinality*valuesNumber,bigEndian),pos+=arrayType.BYTES_PER_ELEMENT*cardinality*valuesNumber,attributes[attributeName]={type:attributeType,normalized:attributeNormalized,cardinality:cardinality,values:values}}pos=4*Math.ceil(pos/4);var indices=null;return indexedGeometry&&(indices=copyFromBuffer(buffer,1===indicesType?Uint32Array:Uint16Array,pos+offset,indicesNumber,bigEndian)),{version:version,bigEndian:bigEndian,attributes:attributes,indices:indices}}module.exports=decode},{"../utils/is-big-endian-platform":6}],5:[function(require,module,exports){"use strict";var isBigEndianPlatform=require("../utils/is-big-endian-platform"),attributeTypes=require("./attribute-types"),EncodingTypes={Float32Array:1,Int8Array:3,Int16Array:4,Int32Array:6,Uint8Array:7,Uint16Array:8,Uint32Array:10},setMethods={Uint16Array:"setUint16",Uint32Array:"setUint32",Int16Array:"setInt16",Int32Array:"setInt32",Float32Array:"setFloat32"};function copyToBuffer(sourceTypedArray,destinationArrayBuffer,position,bigEndian){var length=sourceTypedArray.length,bytesPerElement=sourceTypedArray.BYTES_PER_ELEMENT,writeArray=new sourceTypedArray.constructor(destinationArrayBuffer,position,length);if(bigEndian===isBigEndianPlatform()||1===bytesPerElement)writeArray.set(sourceTypedArray.subarray(0,length));else{var writeView=new DataView(destinationArrayBuffer,position,length*bytesPerElement),setMethod=setMethods[sourceTypedArray.constructor.name],littleEndian=!bigEndian,i=0;for(i=0;i<length;i++)writeView[setMethod](i*bytesPerElement,sourceTypedArray[i],littleEndian)}return writeArray}function encode(attributes,indices,bigEndian){var attributeKeys=attributes?Object.keys(attributes):[],indexedGeometry=!!indices,i,j;if(0===attributeKeys.length)throw new Error("PRWM encoder: The model must have at least one attribute");if(attributeKeys.length>31)throw new Error("PRWM encoder: The model can have at most 31 attributes");for(i=0;i<attributeKeys.length;i++)if(!EncodingTypes.hasOwnProperty(attributes[attributeKeys[i]].values.constructor.name))throw new Error("PRWM encoder: Unsupported attribute values type: "+attributes[attributeKeys[i]].values.constructor.name);if(indexedGeometry&&"Uint16Array"!==indices.constructor.name&&"Uint32Array"!==indices.constructor.name)throw new Error("PRWM encoder: The indices must be represented as an Uint16Array or an Uint32Array");var valuesNumber=attributes[attributeKeys[0]].values.length/attributes[attributeKeys[0]].cardinality|0,indicesNumber=indexedGeometry?indices.length:0,indicesType=indexedGeometry&&"Uint32Array"===indices.constructor.name?1:0,totalLength=8,attributeKey,attribute,attributeType,attributeNormalized;for(i=0;i<attributeKeys.length;i++)attribute=attributes[attributeKey=attributeKeys[i]],totalLength+=attributeKey.length+2,totalLength=4*Math.ceil(totalLength/4),totalLength+=attribute.values.byteLength;indexedGeometry&&(totalLength=4*Math.ceil(totalLength/4),totalLength+=indices.byteLength);var buffer=new ArrayBuffer(totalLength),array=new Uint8Array(buffer);array[0]=1,array[1]=indexedGeometry<<7|indicesType<<6|(bigEndian?1:0)<<5|31&attributeKeys.length,bigEndian?(array[2]=valuesNumber>>16&255,array[3]=valuesNumber>>8&255,array[4]=255&valuesNumber,array[5]=indicesNumber>>16&255,array[6]=indicesNumber>>8&255,array[7]=255&indicesNumber):(array[2]=255&valuesNumber,array[3]=valuesNumber>>8&255,array[4]=valuesNumber>>16&255,array[5]=255&indicesNumber,array[6]=indicesNumber>>8&255,array[7]=indicesNumber>>16&255);var pos=8;for(i=0;i<attributeKeys.length;i++){for(attributeType=void 0===(attribute=attributes[attributeKey=attributeKeys[i]]).type?attributeTypes.Float:attribute.type,attributeNormalized=attribute.normalized?1:0,j=0;j<attributeKey.length;j++,pos++)array[pos]=127&attributeKey.charCodeAt(j)||95;var attributesWriteArray;array[++pos]=attributeType<<7|attributeNormalized<<6|(attribute.cardinality-1&3)<<4|15&EncodingTypes[attribute.values.constructor.name],pos++,pos=4*Math.ceil(pos/4),pos+=copyToBuffer(attribute.values,buffer,pos,bigEndian).byteLength}return indexedGeometry&&copyToBuffer(indices,buffer,pos=4*Math.ceil(pos/4),bigEndian),buffer}module.exports=encode},{"../utils/is-big-endian-platform":6,"./attribute-types":3}],6:[function(require,module,exports){"use strict";var bigEndianPlatform=null;function isBigEndianPlatform(){if(null===bigEndianPlatform){var buffer=new ArrayBuffer(2),uint8Array=new Uint8Array(buffer),uint16Array=new Uint16Array(buffer);uint8Array[0]=170,uint8Array[1]=187,bigEndianPlatform=43707===uint16Array[0]}return bigEndianPlatform}module.exports=isBigEndianPlatform},{}],7:[function(require,module,exports){module.exports=ParseWavefrontObj;var vertexInfoNameMap={v:"vertexPositions",vt:"vertexUVs",vn:"vertexNormals"};function ParseWavefrontObj(wavefrontString){"use strict";var parsedJSON={vertexColors:[],vertexNormals:[],vertexUVs:[],vertexPositions:[],vertexNormalIndices:[],vertexUVIndices:[],vertexPositionIndices:[]},linesInWavefrontObj=wavefrontString.split("\n"),currentLine,currentLineTokens,vertexInfoType,i,k;for(i=0;i<linesInWavefrontObj.length;i++)if(currentLineTokens=(currentLine=linesInWavefrontObj[i]).trim().split(/\s+/),vertexInfoType=vertexInfoNameMap[currentLineTokens[0]])for(k=1;k<currentLineTokens.length;k++)"v"===currentLineTokens[0]&&k>3?parsedJSON.vertexColors.push(parseFloat(currentLineTokens[k])):parsedJSON[vertexInfoType].push(parseFloat(currentLineTokens[k]));else if("f"===currentLineTokens[0])for(k=1;k<5;k++)if(4!==k||currentLineTokens[4]){var indices=currentLineTokens[k].split("/");parsedJSON.vertexPositionIndices.push(parseInt(indices[0],10)-1),parsedJSON.vertexUVIndices.push(parseInt(indices[1],10)-1),parsedJSON.vertexNormalIndices.push(parseInt(indices[2],10)-1)}else parsedJSON.vertexPositionIndices.push(-1),parsedJSON.vertexUVIndices.push(-1),parsedJSON.vertexNormalIndices.push(-1);return parsedJSON}},{}],8:[function(require,module,exports){"use strict";var normalizeNormals=function normalizeNormals(normals){var i,x,y,z,n;for(i=0;i<normals.length;i+=3)x=normals[i],y=normals[i+1],z=normals[i+2],n=1/Math.sqrt(x*x+y*y+z*z),normals[i]*=n,normals[i+1]*=n,normals[i+2]*=n},computeVertexNormals=function computeVertexNormals(indices,positions,normals){var pA=[0,0,0],pB=[0,0,0],pC=[0,0,0],cb=[0,0,0],ab=[0,0,0],vA,vB,vC,cbx,cby,cbz,i;for(normals.length=positions.length,i=0;i<normals.length;i++)normals[i]=0;if(indices)for(i=0;i<indices.length;i+=3)vA=3*indices[i],vB=3*indices[i+1],vC=3*indices[i+2],pA[0]=positions[vA],pA[1]=positions[vA+1],pA[2]=positions[vA+2],pB[0]=positions[vB],pB[1]=positions[vB+1],pB[2]=positions[vB+2],pC[0]=positions[vC],pC[1]=positions[vC+1],pC[2]=positions[vC+2],cb[0]=pC[0]-pB[0],cb[1]=pC[1]-pB[1],cb[2]=pC[2]-pB[2],ab[0]=pA[0]-pB[0],ab[1]=pA[1]-pB[1],ab[2]=pA[2]-pB[2],cbx=cb[0],cby=cb[1],cbz=cb[2],cb[0]=cby*ab[2]-cbz*ab[1],cb[1]=cbz*ab[0]-cbx*ab[2],cb[2]=cbx*ab[1]-cby*ab[0],normals[vA]+=cb[0],normals[vA+1]+=cb[1],normals[vA+2]+=cb[2],normals[vB]+=cb[0],normals[vB+1]+=cb[1],normals[vB+2]+=cb[2],normals[vC]+=cb[0],normals[vC+1]+=cb[1],normals[vC+2]+=cb[2];else for(i=0;i<positions.length;i+=9)pA[0]=positions[i],pA[1]=positions[i+1],pA[2]=positions[i+2],pB[0]=positions[i+3],pB[1]=positions[i+4],pB[2]=positions[i+5],pC[0]=positions[i+6],pC[1]=positions[i+7],pC[2]=positions[i+8],cb[0]=pC[0]-pB[0],cb[1]=pC[1]-pB[1],cb[2]=pC[2]-pB[2],ab[0]=pA[0]-pB[0],ab[1]=pA[1]-pB[1],ab[2]=pA[2]-pB[2],cbx=cb[0],cby=cb[1],cbz=cb[2],cb[0]=cby*ab[2]-cbz*ab[1],cb[1]=cbz*ab[0]-cbx*ab[2],cb[2]=cbx*ab[1]-cby*ab[0],normals[i]=cb[0],normals[i+1]=cb[1],normals[i+2]=cb[2],normals[i+3]=cb[0],normals[i+4]=cb[1],normals[i+5]=cb[2],normals[i+6]=cb[0],normals[i+7]=cb[1],normals[i+8]=cb[2];normalizeNormals(normals)};module.exports=computeVertexNormals},{}]},{},[1])(1)}));