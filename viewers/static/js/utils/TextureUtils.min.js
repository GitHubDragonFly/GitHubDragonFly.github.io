let _renderer,fullscreenQuadGeometry,fullscreenQuadMaterial,fullscreenQuad;function decompress(e,r=1/0,n=null){fullscreenQuadGeometry||(fullscreenQuadGeometry=new THREE.PlaneGeometry(2,2,1,1)),fullscreenQuadMaterial||(fullscreenQuadMaterial=new THREE.ShaderMaterial({uniforms:{blitTexture:new THREE.Uniform(e)},vertexShader:"\n            varying vec2 vUv;\n            void main(){\n                vUv = uv;\n                gl_Position = vec4(position.xy * 1.0,0.,.999999);\n            }",fragmentShader:"\n            uniform sampler2D blitTexture; \n            varying vec2 vUv;\n\n            void main(){ \n                gl_FragColor = vec4(vUv.xy, 0, 1);\n                \n                #ifdef IS_SRGB\n                gl_FragColor = LinearTosRGB( texture2D( blitTexture, vUv) );\n                #else\n                gl_FragColor = texture2D( blitTexture, vUv);\n                #endif\n            }"})),fullscreenQuadMaterial.uniforms.blitTexture.value=e,fullscreenQuadMaterial.defines.IS_SRGB=e.colorSpace==THREE.SRGBColorSpace,fullscreenQuadMaterial.needsUpdate=!0,fullscreenQuad||(fullscreenQuad=new THREE.Mesh(fullscreenQuadGeometry,fullscreenQuadMaterial),fullscreenQuad.frustrumCulled=!1);const l=new THREE.PerspectiveCamera,a=new THREE.Scene;a.add(fullscreenQuad),n||(n=_renderer=new THREE.WebGLRenderer({antialias:!1})),n.setSize(Math.min(e.image.width,r),Math.min(e.image.height,r)),n.clear(),n.render(a,l);const u=new THREE.Texture(n.domElement);return u.minFilter=e.minFilter,u.magFilter=e.magFilter,u.wrapS=e.wrapS,u.wrapT=e.wrapT,u.name=e.name,_renderer&&(_renderer.dispose(),_renderer=null),u}