export default class GLTFTextExtension{constructor(e,t){this.name="EXT_texture_video",this.parser=e,this.THREE=t,this.WEBGL_FILTERS={9728:t.NearestFilter,9729:t.LinearFilter,9984:t.NearestMipmapNearestFilter,9985:t.LinearMipmapNearestFilter,9986:t.NearestMipmapLinearFilter,9987:t.LinearMipmapLinearFilter},this.WEBGL_WRAPPINGS={33071:t.ClampToEdgeWrapping,33648:t.MirroredRepeatWrapping,10497:t.RepeatWrapping}}loadTexture(e){const t=this.parser.json,i=t.textures[e];if(!(t.extensions&&t.extensions[this.name]&&i.extensions&&i.extensions[this.name]))return null;const r=i.extensions[this.name],s=t.extensions[this.name].videos[r.source],a=document.createElement("video"),n=(t.samplers||[])[r.sampler]||{};return new Promise((e=>{a.src=(this.parser.options.path||"")+s.uri,a.loop=!0,a.muted=!0,a.load();const t=i=>{a.removeEventListener("canplaythrough",t),a.play();const r=new this.THREE.VideoTexture(a);r.flipY=!1,r.magFilter=this.WEBGL_FILTERS[n.magFilter]||this.THREE.LinearFilter,r.minFilter=this.WEBGL_FILTERS[n.minFilter]||this.THREE.LinearFilter,r.wrapS=this.WEBGL_WRAPPINGS[n.wrapS]||this.THREE.RepeatWrapping,r.wrapT=this.WEBGL_WRAPPINGS[n.wrapT]||this.THREE.RepeatWrapping,e(r)};a.addEventListener("canplaythrough",t)}))}}