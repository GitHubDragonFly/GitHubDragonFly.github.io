import{CompressedTexture,FileLoader,LinearFilter,LinearMipmapLinearFilter,Loader,RGBAFormat,RGBA_ASTC_4x4_Format,RGBA_BPTC_Format,RGBA_ETC2_EAC_Format,RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT5_Format,RGB_ETC1_Format,RGB_ETC2_Format,RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format,UnsignedByteType}from"three";const _taskCache=new WeakMap;class BasisTextureLoader extends Loader{constructor(e){super(e),this.transcoderPath="",this.transcoderBinary=null,this.transcoderPending=null,this.workerLimit=4,this.workerPool=[],this.workerNextTaskID=1,this.workerSourceURL="",this.workerConfig=null}setTranscoderPath(e){return this.transcoderPath=e,this}setWorkerLimit(e){return this.workerLimit=e,this}detectSupport(e){return this.workerConfig={astcSupported:e.extensions.has("WEBGL_compressed_texture_astc"),etc1Supported:e.extensions.has("WEBGL_compressed_texture_etc1"),etc2Supported:e.extensions.has("WEBGL_compressed_texture_etc"),dxtSupported:e.extensions.has("WEBGL_compressed_texture_s3tc"),bptcSupported:e.extensions.has("EXT_texture_compression_bptc"),pvrtcSupported:e.extensions.has("WEBGL_compressed_texture_pvrtc")||e.extensions.has("WEBKIT_WEBGL_compressed_texture_pvrtc")},this}load(e,t,r,a){const o=new FileLoader(this.manager);o.setResponseType("arraybuffer"),o.setWithCredentials(this.withCredentials);const s=new CompressedTexture;return o.load(e,(e=>{if(_taskCache.has(e)){return _taskCache.get(e).promise.then(t).catch(a)}this._createTexture([e]).then((function(e){s.copy(e),s.needsUpdate=!0,t&&t(s)})).catch(a)}),r,a),s}parseInternalAsync(e){const{levels:t}=e,r=new Set;for(let e=0;e<t.length;e++)r.add(t[e].data.buffer);return this._createTexture(Array.from(r),{...e,lowLevel:!0})}_createTexture(e,t={}){let r,a;const o=t;let s=0;for(let t=0;t<e.length;t++)s+=e[t].byteLength;const i=this._allocateWorker(s).then((t=>(r=t,a=this.workerNextTaskID++,new Promise(((t,s)=>{r._callbacks[a]={resolve:t,reject:s},r.postMessage({type:"transcode",id:a,buffers:e,taskConfig:o},e)}))))).then((e=>{const{mipmaps:t,width:r,height:a,format:o}=e,s=new CompressedTexture(t,r,a,o,UnsignedByteType);return s.minFilter=1===t.length?LinearFilter:LinearMipmapLinearFilter,s.magFilter=LinearFilter,s.generateMipmaps=!1,s.needsUpdate=!0,s}));return i.catch((()=>!0)).then((()=>{r&&a&&(r._taskLoad-=s,delete r._callbacks[a])})),_taskCache.set(e[0],{promise:i}),i}_initTranscoder(){if(!this.transcoderPending){const e=new FileLoader(this.manager);e.setPath(this.transcoderPath),e.setWithCredentials(this.withCredentials);const t=new Promise(((t,r)=>{e.load("basis_transcoder.js",t,void 0,r)})),r=new FileLoader(this.manager);r.setPath(this.transcoderPath),r.setResponseType("arraybuffer"),r.setWithCredentials(this.withCredentials);const a=new Promise(((e,t)=>{r.load("basis_transcoder.wasm",e,void 0,t)}));this.transcoderPending=Promise.all([t,a]).then((([e,t])=>{const r=BasisTextureLoader.BasisWorker.toString(),a=["/* constants */","let _EngineFormat = "+JSON.stringify(BasisTextureLoader.EngineFormat),"let _TranscoderFormat = "+JSON.stringify(BasisTextureLoader.TranscoderFormat),"let _BasisFormat = "+JSON.stringify(BasisTextureLoader.BasisFormat),"/* basis_transcoder.js */",e,"/* worker */",r.substring(r.indexOf("{")+1,r.lastIndexOf("}"))].join("\n");this.workerSourceURL=URL.createObjectURL(new Blob([a])),this.transcoderBinary=t}))}return this.transcoderPending}_allocateWorker(e){return this._initTranscoder().then((()=>{if(this.workerPool.length<this.workerLimit){const e=new Worker(this.workerSourceURL);e._callbacks={},e._taskLoad=0,e.postMessage({type:"init",config:this.workerConfig,transcoderBinary:this.transcoderBinary}),e.onmessage=function(t){const r=t.data;switch(r.type){case"transcode":e._callbacks[r.id].resolve(r);break;case"error":e._callbacks[r.id].reject(r);break;default:}},this.workerPool.push(e)}else this.workerPool.sort((function(e,t){return e._taskLoad>t._taskLoad?-1:1}));const t=this.workerPool[this.workerPool.length-1];return t._taskLoad+=e,t}))}dispose(){for(let e=0;e<this.workerPool.length;e++)this.workerPool[e].terminate();return this.workerPool.length=0,this}}BasisTextureLoader.BasisFormat={ETC1S:0,UASTC_4x4:1},BasisTextureLoader.TranscoderFormat={ETC1:0,ETC2:1,BC1:2,BC3:3,BC4:4,BC5:5,BC7_M6_OPAQUE_ONLY:6,BC7_M5:7,PVRTC1_4_RGB:8,PVRTC1_4_RGBA:9,ASTC_4x4:10,ATC_RGB:11,ATC_RGBA_INTERPOLATED_ALPHA:12,RGBA32:13,RGB565:14,BGR565:15,RGBA4444:16},BasisTextureLoader.EngineFormat={RGBAFormat:RGBAFormat,RGBA_ASTC_4x4_Format:RGBA_ASTC_4x4_Format,RGBA_BPTC_Format:RGBA_BPTC_Format,RGBA_ETC2_EAC_Format:RGBA_ETC2_EAC_Format,RGBA_PVRTC_4BPPV1_Format:RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT5_Format:RGBA_S3TC_DXT5_Format,RGB_ETC1_Format:RGB_ETC1_Format,RGB_ETC2_Format:RGB_ETC2_Format,RGB_PVRTC_4BPPV1_Format:RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format:RGB_S3TC_DXT1_Format},BasisTextureLoader.BasisWorker=function(){let e,t,r;const a=_EngineFormat,o=_TranscoderFormat,s=_BasisFormat;onmessage=function(a){const o=a.data;switch(o.type){case"init":e=o.config,i=o.transcoderBinary,t=new Promise((e=>{r={wasmBinary:i,onRuntimeInitialized:e},BASIS(r)})).then((()=>{r.initializeBasis()}));break;case"transcode":t.then((()=>{try{const{width:e,height:t,hasAlpha:a,mipmaps:i,format:n}=o.taskConfig.lowLevel?function(e){const{basisFormat:t,width:a,height:o,hasAlpha:i}=e,{transcoderFormat:n,engineFormat:d}=c(t,a,o,i),l=r.getBytesPerBlockOrPixel(n);_(r.isFormatSupported(n),"THREE.BasisTextureLoader: Unsupported format.");const B=[];if(t===s.ETC1S){const t=new r.LowLevelETC1SImageTranscoder,{endpointCount:a,endpointsData:o,selectorCount:s,selectorsData:d,tablesData:c}=e.globalData;try{let r;r=t.decodePalettes(a,o,s,d),_(r,"THREE.BasisTextureLoader: decodePalettes() failed."),r=t.decodeTables(c),_(r,"THREE.BasisTextureLoader: decodeTables() failed.");for(let a=0;a<e.levels.length;a++){const o=e.levels[a],s=e.globalData.imageDescs[a],d=m(n,o.width,o.height),c=new Uint8Array(d);r=t.transcodeImage(n,c,d/l,o.data,h(n,o.width),T(n,o.height),o.width,o.height,o.index,s.rgbSliceByteOffset,s.rgbSliceByteLength,s.alphaSliceByteOffset,s.alphaSliceByteLength,s.imageFlags,i,!1,0,0),_(r,"THREE.BasisTextureLoader: transcodeImage() failed for level "+o.index+"."),B.push({data:c,width:o.width,height:o.height})}}finally{t.delete()}}else for(let t=0;t<e.levels.length;t++){const a=e.levels[t],o=m(n,a.width,a.height),s=new Uint8Array(o);_(r.transcodeUASTCImage(n,s,o/l,a.data,h(n,a.width),T(n,a.height),a.width,a.height,a.index,0,a.data.byteLength,0,i,!1,0,0,-1,-1),"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level "+a.index+"."),B.push({data:s,width:a.width,height:a.height})}return{width:a,height:o,hasAlpha:i,mipmaps:B,format:d}}(o.taskConfig):function(e){const t=new r.BasisFile(new Uint8Array(e)),a=t.isUASTC()?s.UASTC_4x4:s.ETC1S,o=t.getImageWidth(0,0),i=t.getImageHeight(0,0),n=t.getNumLevels(0),d=t.getHasAlpha();function _(){t.close(),t.delete()}const{transcoderFormat:h,engineFormat:T}=c(a,o,i,d);if(!o||!i||!n)throw _(),new Error("THREE.BasisTextureLoader:\tInvalid texture");if(!t.startTranscoding())throw _(),new Error("THREE.BasisTextureLoader: .startTranscoding failed");const m=[];for(let e=0;e<n;e++){const r=t.getImageWidth(0,e),a=t.getImageHeight(0,e),o=new Uint8Array(t.getImageTranscodedSizeInBytes(0,e,h));if(!t.transcodeImage(o,0,e,h,0,d))throw _(),new Error("THREE.BasisTextureLoader: .transcodeImage failed.");m.push({data:o,width:r,height:a})}return _(),{width:o,height:i,hasAlpha:d,mipmaps:m,format:T}}(o.buffers[0]),d=[];for(let e=0;e<i.length;++e)d.push(i[e].data.buffer);self.postMessage({type:"transcode",id:o.id,width:e,height:t,hasAlpha:a,mipmaps:i,format:n},d)}catch(e){self.postMessage({type:"error",id:o.id,error:e.message})}}));break}var i};const i=[{if:"astcSupported",basisFormat:[s.UASTC_4x4],transcoderFormat:[o.ASTC_4x4,o.ASTC_4x4],engineFormat:[a.RGBA_ASTC_4x4_Format,a.RGBA_ASTC_4x4_Format],priorityETC1S:1/0,priorityUASTC:1,needsPowerOfTwo:!1},{if:"bptcSupported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[o.BC7_M5,o.BC7_M5],engineFormat:[a.RGBA_BPTC_Format,a.RGBA_BPTC_Format],priorityETC1S:3,priorityUASTC:2,needsPowerOfTwo:!1},{if:"dxtSupported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[o.BC1,o.BC3],engineFormat:[a.RGB_S3TC_DXT1_Format,a.RGBA_S3TC_DXT5_Format],priorityETC1S:4,priorityUASTC:5,needsPowerOfTwo:!1},{if:"etc2Supported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[o.ETC1,o.ETC2],engineFormat:[a.RGB_ETC2_Format,a.RGBA_ETC2_EAC_Format],priorityETC1S:1,priorityUASTC:3,needsPowerOfTwo:!1},{if:"etc1Supported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[o.ETC1,o.ETC1],engineFormat:[a.RGB_ETC1_Format,a.RGB_ETC1_Format],priorityETC1S:2,priorityUASTC:4,needsPowerOfTwo:!1},{if:"pvrtcSupported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[o.PVRTC1_4_RGB,o.PVRTC1_4_RGBA],engineFormat:[a.RGB_PVRTC_4BPPV1_Format,a.RGBA_PVRTC_4BPPV1_Format],priorityETC1S:5,priorityUASTC:6,needsPowerOfTwo:!0}],n=i.sort((function(e,t){return e.priorityETC1S-t.priorityETC1S})),d=i.sort((function(e,t){return e.priorityUASTC-t.priorityUASTC}));function c(t,r,i,c){let _,h;const T=t===s.ETC1S?n:d;for(let a=0;a<T.length;a++){const o=T[a];if(e[o.if]&&(o.basisFormat.includes(t)&&(!o.needsPowerOfTwo||l(r)&&l(i))))return _=o.transcoderFormat[c?1:0],h=o.engineFormat[c?1:0],{transcoderFormat:_,engineFormat:h}}return _=o.RGBA32,h=a.RGBAFormat,{transcoderFormat:_,engineFormat:h}}function _(e,t){if(!e)throw new Error(t)}function h(e,t){return Math.ceil(t/r.getFormatBlockWidth(e))}function T(e,t){return Math.ceil(t/r.getFormatBlockHeight(e))}function m(e,t,a){const s=r.getBytesPerBlockOrPixel(e);if(r.formatIsUncompressed(e))return t*a*s;if(e===o.PVRTC1_4_RGB||e===o.PVRTC1_4_RGBA){const e=t+3&-4,r=a+3&-4;return(Math.max(8,e)*Math.max(8,r)*4+7)/8}return h(e,t)*T(e,a)*s}function l(e){return e<=2||0==(e&e-1)&&0!==e}};export{BasisTextureLoader};