import{DefaultLoadingManager,ClampToEdgeWrapping,Color,LinearFilter,MirroredRepeatWrapping,NearestFilter}from"three";import{strToU8,zipSync}from"three/addons/libs/fflate.module.min.js";import{mergeVertices}from"three/addons/utils/BufferGeometryUtils.min.js";async function import_decompress(){try{const{WebGLRenderer:e}=await import("three"),{decompress:t}=await import("https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/utils/TextureUtils.min.js");return{decompress:t,renderer:new e({antialias:!0})}}catch(e){}try{const{CanvasTexture:e,NodeMaterial:t,QuadMesh:a,WebGPURenderer:r}=await import("three"),{texture:n,uv:i}=await import("three/tsl"),s=new r({antialias:!0});await s.init();const o=new a;return{decompress:function(a,r=1/0,s=null){const l=a.clone();l.offset.set(0,0),l.repeat.set(1,1);const m=new t;m.fragmentNode=n(l,i().flipY());const p=Math.min(l.image.width,r),c=Math.min(l.image.height,r);s.setSize(p,c),s.outputColorSpace=l.colorSpace,o.material=m,o.render(s);const d=document.createElement("canvas"),u=d.getContext("2d");d.width=p,d.height=c,u.drawImage(s.domElement,0,0,p,c);const g=new e(d);return g.offset.set(a.offset.x,a.offset.y),g.repeat.set(a.repeat.x,a.repeat.y),g.colorSpace=a.colorSpace,g.minFilter=a.minFilter,g.magFilter=a.magFilter,g.wrapS=a.wrapS,g.wrapT=a.wrapT,g.name=a.name,l.dispose(),g},renderer:s}}catch(e){throw new Error("THREE.3MFExporter: Could not import decompress function!")}}class ThreeMFExporter{constructor(e){this.manager=e||DefaultLoadingManager,this.decompress=null,this.renderer=null}parse(e,t,a,r={}){this.parseAsync(e,r).then(t).catch(a)}async parseAsync(e,t={}){e.updateMatrixWorld(!0,!0);const{decompress:a,renderer:r}=await import_decompress();this.decompress=a,this.renderer=r,t=Object.assign({upAxis:"Y_UP",map_flip_required:!1,maxTextureSize:1/0},t);let n='<?xml version="1.0" encoding="UTF-8"?>\n';n+='<model unit="millimeter" xml:lang="en-US" xmlns:m="http://schemas.microsoft.com/3dmanufacturing/material/2015/02" xmlns="http://schemas.microsoft.com/3dmanufacturing/core/2015/02">\n',n+=await this.createResourcesSection(e),n+=await this.createBuildSection(e),n+="</model>\n";const i={},s=await this.createRelsFile(),o=await this.createTexturesRelsFile(e);return i["[Content_Types].xml"]=await strToU8(this.createContentTypesFile()),i["_rels/.rels"]=await strToU8(s),null!==o&&(i["3D/_rels/3dmodel.model.rels"]=await strToU8(o),await this.addTexturesToZip(e,i,t)),i["3D/3dmodel.model"]=await strToU8(n),zipSync(i,{level:0})}async createResourcesSection(e){const t=this;let a=" <resources>\n";return e.traverse((e=>{if(e.isMesh){let r=e.geometry,n=e.material;if(r.index||(r=mergeVertices(r,1e-6)),r.attributes.normal||r.computeVertexNormals(),a+='  <basematerials id="'+n.id+'">\n',a+='   <base name="'+n.type+'" displaycolor="#'+n.color.getHexString().toUpperCase()+'FF" />\n',a+="  </basematerials>\n",n.map){!0===n.map.isCompressedTexture&&(n.map=t.decompress(n.map,1/0,t.renderer));let i=n.map.name?n.map.name:"texture_"+n.map.uuid;-1===i.indexOf(".")&&(i+=".png");let s=n.map.wrapS===MirroredRepeatWrapping?"mirror":n.map.wrapS===ClampToEdgeWrapping?"clamp":"wrap",o=n.map.wrapT===MirroredRepeatWrapping?"mirror":n.map.wrapT===ClampToEdgeWrapping?"clamp":"wrap",l=n.map.magFilter===NearestFilter&&n.map.minFilter===NearestFilter?"nearest":n.map.magFilter===LinearFilter&&n.map.minFilter===LinearFilter?"linear":"auto";a+='  <m:texture2d id="'+n.map.id+'" path="/3D/Textures/'+i+'" contenttype="image/png" tilestyleu="'+s+'" tilestylev="'+o+'" filter="'+l+'" />\n',r.hasAttribute("uv")&&(a+=this.generateUVs(r,e.id,n.map.id))}r.attributes.color&&(a+='  <m:colorgroup id="'+r.id+'">\n',a+=this.generateColors(r),a+="  </m:colorgroup>\n"),a+='  <object id="'+e.id+'" name="'+e.name+'" type="model">\n',a+="   <mesh>\n",a+=this.generateVertices(r),a+=this.generateTriangles(r,n.map?e.id:null,r.attributes.color?r.id:null),a+="   </mesh>\n",a+="  </object>\n"}})),a+=" </resources>\n",a}async createBuildSection(e){let t=" <build>\n";return e.traverse((e=>{e.isMesh&&(t+='  <item objectid="'+e.id+'" />\n')})),t+=" </build>\n",t}async createRelsFile(){let e='<?xml version="1.0" encoding="UTF-8"?>\n';return e+='<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n',e+=' <Relationship Target="/3D/3dmodel.model" Id="rel0" Type="http://schemas.microsoft.com/3dmanufacturing/2013/01/3dmodel" />\n',e+="</Relationships>\n",'<?xml version="1.0" encoding="UTF-8"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n <Relationship Target="/3D/3dmodel.model" Id="rel0" Type="http://schemas.microsoft.com/3dmanufacturing/2013/01/3dmodel" />\n</Relationships>\n'}async createTexturesRelsFile(e){let t=!1,a='<?xml version="1.0" encoding="UTF-8"?>\n';a+='<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n';const r={};return e.traverse((e=>{if(e.isMesh&&e.material.map){t=!0;let n=e.material.map.name?e.material.map.name:"texture_"+e.material.map.uuid;-1===n.indexOf(".")&&(n+=".png"),r[n]||(r[n]=n,a+=' <Relationship Target="/3D/Textures/'+n+'" Id="rel'+e.material.map.id+'" Type="http://schemas.microsoft.com/3dmanufacturing/2013/01/3dtexture" />\n')}})),a+="</Relationships>\n",!0===t?a:null}createContentTypesFile(){let e='<?xml version="1.0" encoding="UTF-8"?>\n';return e+='<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">\n',e+=' <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" />\n',e+=' <Default Extension="model" ContentType="application/vnd.ms-package.3dmanufacturing-3dmodel+xml" />\n',e+=' <Default Extension="png" ContentType="image/png" />\n',e+="</Types>\n",'<?xml version="1.0" encoding="UTF-8"?>\n<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">\n <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" />\n <Default Extension="model" ContentType="application/vnd.ms-package.3dmanufacturing-3dmodel+xml" />\n <Default Extension="png" ContentType="image/png" />\n</Types>\n'}generateColors(e){const t=e.getAttribute("color");let a="";for(let e=0;e<t.count;e++){a+='   <m:color color="#'+((new Color).fromBufferAttribute(t,e).getHexString().toUpperCase()+"FF")+'" />\n'}return a}generateVertices(e){const t=e.attributes.position.array;let a="    <vertices>\n";for(let e=0;e<t.length;e+=3){a+='     <vertex x="'+t[e]+'" y="'+t[e+1]+'" z="'+t[e+2]+'" />\n'}return a+="    </vertices>\n",a}generateTriangles(e,t=null,a=null){const r=e.index.array;let n="    <triangles>\n";for(let e=0;e<r.length;e+=3){let i=r[e],s=r[e+1],o=r[e+2];n+=t?'     <triangle v1="'+i+'" v2="'+s+'" v3="'+o+'" pid="'+t+'" p1="'+i+'" p2="'+s+'" p3="'+o+'" />\n':a?'     <triangle v1="'+i+'" v2="'+s+'" v3="'+o+'" pid="'+a+'" p1="'+i+'" />\n':'     <triangle v1="'+i+'" v2="'+s+'" v3="'+o+'" />\n'}return n+="    </triangles>\n",n}generateUVs(e,t,a){const r=e.attributes.uv.array;let n='  <m:texture2dgroup id="'+t+'" texid="'+a+'">\n';for(let e=0;e<r.length;e+=2){n+='   <m:tex2coord u="'+r[e]+'" v="'+r[e+1]+'" />\n'}return n+="  </m:texture2dgroup>\n",n}async addTexturesToZip(e,t,a){const r={},n=[];e.traverse((e=>{if(e.isMesh&&e.material.map){let i=e.material.map,s=i.name?i.name:"texture_"+i.uuid;if(-1===s.indexOf(".")&&(s+=".png"),!r[s]){r[s]=s;const e=this.imageToCanvas(i.image,a.map_flip_required,a.maxTextureSize).toDataURL("image/png",1).split(",")[1],o=atob(e),l=o.length,m=new Uint8Array(l);for(let e=0;e<l;e++)m[e]=o.charCodeAt(e);const p=new Blob([m],{type:"image/png"});n.push(new Promise((async e=>{const a=await p.arrayBuffer(),r=new Uint8Array(a);e(t["3D/Textures/"+s]=r)})))}}})),await Promise.all(n)}imageToCanvas(e,t,a){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){let r,n;if("canvas"==typeof e)r=e;else{r=document.createElement("canvas");let i=a/Math.max(e.width,e.height);if(r.width=e.width*Math.min(1,i),r.height=e.height*Math.min(1,i),n=r.getContext("2d",{willReadFrequently:!0}),!0===t&&(n.translate(0,r.height),n.scale(1,-1)),e instanceof ImageData)n.putImageData(e,0,0);else if(e.data&&e.data.constructor===Uint8Array){let t=new ImageData(new Uint8ClampedArray(e.data),e.width,e.height);n.putImageData(t,0,0)}else n.drawImage(e,0,0,r.width,r.height)}return r}throw new Error("THREE.3MFExporter: No valid image data found. Unable to process texture.")}}export{ThreeMFExporter};