import{BufferAttribute,ClampToEdgeWrapping,Color,DefaultLoadingManager,InterleavedBufferAttribute,LinearFilter,MirroredRepeatWrapping,NearestFilter}from"three";import{strToU8,zipSync}from"three/addons/libs/fflate.module.min.js";import{deinterleaveAttribute,mergeVertices}from"three/addons/utils/BufferGeometryUtils.min.js";async function import_decompress(){try{const{WebGLRenderer:e}=await import("three"),{decompress:t}=await import("https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/utils/TextureUtils.min.js");return{decompress:t,renderer:new e({antialias:!0})}}catch(e){}try{const{CanvasTexture:e,NodeMaterial:t,QuadMesh:r,WebGPURenderer:a}=await import("three"),{texture:n,uv:i}=await import("three/tsl"),s=new a({antialias:!0});await s.init();const o=new r;return{decompress:function(r,a=1/0,s=null){const l=r.clone();l.offset.set(0,0),l.repeat.set(1,1);const m=new t;m.fragmentNode=n(l,i().flipY());const p=Math.min(l.image.width,a),c=Math.min(l.image.height,a);s.setSize(p,c),s.outputColorSpace=l.colorSpace,o.material=m,o.render(s);const d=document.createElement("canvas"),u=d.getContext("2d");d.width=p,d.height=c,u.drawImage(s.domElement,0,0,p,c);const g=new e(d);return g.offset.set(r.offset.x,r.offset.y),g.repeat.set(r.repeat.x,r.repeat.y),g.colorSpace=r.colorSpace,g.minFilter=r.minFilter,g.magFilter=r.magFilter,g.wrapS=r.wrapS,g.wrapT=r.wrapT,g.name=r.name,l.dispose(),g},renderer:s}}catch(e){throw new Error("THREE.3MFExporter: Could not import decompress function!")}}class ThreeMFExporter{constructor(e){this.manager=e||DefaultLoadingManager,this.decompress=null,this.renderer=null}parse(e,t,r,a={}){this.parseAsync(e,a).then(t).catch(r)}async parseAsync(e,t={}){e.updateMatrixWorld(!0,!0);const{decompress:r,renderer:a}=await import_decompress();this.decompress=r,this.renderer=a,t=Object.assign({upAxis:"Y_UP",map_flip_required:!1,maxTextureSize:1/0},t);let n='<?xml version="1.0" encoding="UTF-8"?>\n';n+='<model unit="millimeter" xml:lang="en-US" xmlns:m="http://schemas.microsoft.com/3dmanufacturing/material/2015/02" xmlns="http://schemas.microsoft.com/3dmanufacturing/core/2015/02">\n',n+=await this.createResourcesSection(e),n+=await this.createBuildSection(e),n+="</model>\n";const i={},s=await this.createRelsFile(),o=await this.createTexturesRelsFile(e);return i["[Content_Types].xml"]=await strToU8(this.createContentTypesFile()),i["_rels/.rels"]=await strToU8(s),null!==o&&(i["3D/_rels/3dmodel.model.rels"]=await strToU8(o),await this.addTexturesToZip(e,i,t)),i["3D/3dmodel.model"]=await strToU8(n),zipSync(i,{level:8})}async createResourcesSection(e){const t=this;let r=" <resources>\n";return e.traverse((e=>{if(e.isMesh){let a=this.interleaved_buffer_attribute_check(e.geometry.clone()),n=e.material.clone();if(a.index||(a=mergeVertices(a,1e-6)),a.attributes.normal||a.computeVertexNormals(),r+='  <basematerials id="'+n.id+'">\n',r+='   <base name="'+n.type+'" displaycolor="#'+n.color.getHexString().toUpperCase()+'FF" />\n',r+="  </basematerials>\n",n.map){!0===n.map.isCompressedTexture&&(n.map=t.decompress(n.map,1/0,t.renderer));let i=n.map.name?n.map.name:"texture_"+n.map.uuid;-1===i.indexOf(".")&&(i+=".png");let s=n.map.wrapS===MirroredRepeatWrapping?"mirror":n.map.wrapS===ClampToEdgeWrapping?"clamp":"wrap",o=n.map.wrapT===MirroredRepeatWrapping?"mirror":n.map.wrapT===ClampToEdgeWrapping?"clamp":"wrap",l=n.map.magFilter===NearestFilter&&n.map.minFilter===NearestFilter?"nearest":n.map.magFilter===LinearFilter&&n.map.minFilter===LinearFilter?"linear":"auto";r+='  <m:texture2d id="'+n.map.id+'" path="/3D/Textures/'+i+'" contenttype="image/png" tilestyleu="'+s+'" tilestylev="'+o+'" filter="'+l+'" />\n',a.hasAttribute("uv")&&(r+=this.generateUVs(a,e.id,n.map.id))}a.attributes.color&&(r+='  <m:colorgroup id="'+a.id+'">\n',r+=this.generateColors(a),r+="  </m:colorgroup>\n"),r+='  <object id="'+e.id+'" name="'+e.name+'" type="model">\n',r+="   <mesh>\n",r+=this.generateVertices(a),r+=this.generateTriangles(a,n.map?e.id:null,a.attributes.color?a.id:null),r+="   </mesh>\n",r+="  </object>\n"}})),r+=" </resources>\n",r}async createBuildSection(e){let t=" <build>\n";return e.traverse((e=>{if(e.isMesh){const r=new THREE.Matrix4;r.copy(e.matrixWorld);const a=new THREE.Vector3,n=new THREE.Quaternion,i=new THREE.Vector3;r.decompose(a,n,i);const s=(new THREE.Matrix4).compose(a,n,i).elements;let o="";o+=s[0]+" "+s[1]+" "+s[2]+" "+s[4]+" ",o+=s[5]+" "+s[6]+" "+s[8]+" "+s[9]+" ",o+=s[10]+" "+s[12]+" "+s[13]+" "+s[14],t+='  <item objectid="'+e.id+'" transform="'+o+'" />\n'}})),t+=" </build>\n",t}async createRelsFile(){let e='<?xml version="1.0" encoding="UTF-8"?>\n';return e+='<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n',e+=' <Relationship Target="/3D/3dmodel.model" Id="rel0" Type="http://schemas.microsoft.com/3dmanufacturing/2013/01/3dmodel" />\n',e+="</Relationships>\n",'<?xml version="1.0" encoding="UTF-8"?>\n<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n <Relationship Target="/3D/3dmodel.model" Id="rel0" Type="http://schemas.microsoft.com/3dmanufacturing/2013/01/3dmodel" />\n</Relationships>\n'}async createTexturesRelsFile(e){let t=!1,r='<?xml version="1.0" encoding="UTF-8"?>\n';r+='<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\n';const a={};return e.traverse((e=>{if(e.isMesh&&e.material.map){t=!0;let n=e.material.map.name?e.material.map.name:"texture_"+e.material.map.uuid;-1===n.indexOf(".")&&(n+=".png"),a[n]||(a[n]=n,r+=' <Relationship Target="/3D/Textures/'+n+'" Id="rel'+e.material.map.id+'" Type="http://schemas.microsoft.com/3dmanufacturing/2013/01/3dtexture" />\n')}})),r+="</Relationships>\n",!0===t?r:null}createContentTypesFile(){let e='<?xml version="1.0" encoding="UTF-8"?>\n';return e+='<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">\n',e+=' <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" />\n',e+=' <Default Extension="model" ContentType="application/vnd.ms-package.3dmanufacturing-3dmodel+xml" />\n',e+=' <Default Extension="png" ContentType="image/png" />\n',e+="</Types>\n",'<?xml version="1.0" encoding="UTF-8"?>\n<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">\n <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" />\n <Default Extension="model" ContentType="application/vnd.ms-package.3dmanufacturing-3dmodel+xml" />\n <Default Extension="png" ContentType="image/png" />\n</Types>\n'}generateColors(e){const t=e.getAttribute("color");let r="";for(let e=0;e<t.count;e++){r+='   <m:color color="#'+((new Color).fromBufferAttribute(t,e).getHexString().toUpperCase()+"FF")+'" />\n'}return r}generateVertices(e){const t=e.attributes.position.array;let r="    <vertices>\n";for(let e=0;e<t.length;e+=3){r+='     <vertex x="'+t[e]+'" y="'+t[e+1]+'" z="'+t[e+2]+'" />\n'}return r+="    </vertices>\n",r}generateTriangles(e,t=null,r=null){const a=e.index.array;let n="    <triangles>\n";for(let e=0;e<a.length;e+=3){let i=a[e],s=a[e+1],o=a[e+2];n+=t?'     <triangle v1="'+i+'" v2="'+s+'" v3="'+o+'" pid="'+t+'" p1="'+i+'" p2="'+s+'" p3="'+o+'" />\n':r?'     <triangle v1="'+i+'" v2="'+s+'" v3="'+o+'" pid="'+r+'" p1="'+i+'" />\n':'     <triangle v1="'+i+'" v2="'+s+'" v3="'+o+'" />\n'}return n+="    </triangles>\n",n}generateUVs(e,t,r){const a=e.attributes.uv.array;let n='  <m:texture2dgroup id="'+t+'" texid="'+r+'">\n';for(let e=0;e<a.length;e+=2){n+='   <m:tex2coord u="'+a[e]+'" v="'+a[e+1]+'" />\n'}return n+="  </m:texture2dgroup>\n",n}async addTexturesToZip(e,t,r){const a={},n=[];e.traverse((e=>{if(e.isMesh&&e.material.map){let i=e.material.map,s=i.name?i.name:"texture_"+i.uuid;if(-1===s.indexOf(".")&&(s+=".png"),!a[s]){a[s]=s;const e=this.imageToCanvas(i.image,r.map_flip_required,r.maxTextureSize).toDataURL("image/png",1).split(",")[1],o=atob(e),l=o.length,m=new Uint8Array(l);for(let e=0;e<l;e++)m[e]=o.charCodeAt(e);const p=new Blob([m],{type:"image/png"});n.push(new Promise((async e=>{const r=await p.arrayBuffer(),a=new Uint8Array(r);e(t["3D/Textures/"+s]=a)})))}}})),await Promise.all(n)}imageToCanvas(e,t,r){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){let a,n;if("canvas"==typeof e)a=e;else{a=document.createElement("canvas");let i=r/Math.max(e.width,e.height);if(a.width=e.width*Math.min(1,i),a.height=e.height*Math.min(1,i),n=a.getContext("2d",{willReadFrequently:!0}),!0===t&&(n.translate(0,a.height),n.scale(1,-1)),e instanceof ImageData)n.putImageData(e,0,0);else if(e.data&&e.data.constructor===Uint8Array){let t=new ImageData(new Uint8ClampedArray(e.data),e.width,e.height);n.putImageData(t,0,0)}else n.drawImage(e,0,0,a.width,a.height)}return a}throw new Error("THREE.3MFExporter: No valid image data found. Unable to process texture.")}deinterleave(e,t="color"){const r=e.attributes[t],a=r.itemSize,n=r.offset,i=r.data;if(void 0===i)return[];let s=new InterleavedBufferAttribute(i,a,n),o=deinterleaveAttribute(s),l=Array(o.array.length);for(let e=0,t=o.array.length;e<t;e++)l[e]=isNaN(o.array[e])?0:o.array[e];return new BufferAttribute(new Float32Array(l),a)}interleaved_buffer_attribute_check(e){const t=["position","normal","color","tangent","uv","uv1","uv2","uv3"];for(const r of t)if(e.attributes[r]&&e.attributes[r].isInterleavedBufferAttribute){if(e.attributes[r].data&&e.attributes[r].data.array){let t=this.deinterleave(e,r);e.deleteAttribute(r),e.setAttribute(r,t)}}else if(e.attributes[r]&&e.attributes[r].array){const t=e.attributes[r].itemSize,a=e.attributes[r].array,n=Array(a.length);for(let e=0,t=a.length;e<t;e++)n[e]=isNaN(a[e])?0:a[e];e.deleteAttribute(r),e.setAttribute(r,new BufferAttribute(new Float32Array(n),t))}return e}}export{ThreeMFExporter};