import{BufferAttribute,DefaultLoadingManager,InterleavedBufferAttribute,Matrix4,Quaternion,Vector3}from"three";import{deinterleaveAttribute,mergeVertices}from"https://cdn.jsdelivr.net/npm/three@0.164.0/examples/jsm/utils/BufferGeometryUtils.min.js";class BIMExporter{constructor(e){this.manager=e||DefaultLoadingManager}async parse(e,t,r,a={}){const i=this,o=(a=Object.assign({skipMatrixCheck:!1},a)).skipMatrixCheck,n={schema_version:"1.1.0",meshes:[],elements:[],info:{Author:"User",Date:new Date}};let s,u=0;if(e.traverse((e=>{if(e.isMesh){const t=e.userData.guid?e.userData.guid:e.uuid;let r=i.interleaved_buffer_attribute_check(e.geometry.clone());!1===o&&(s=(new Matrix4).copy(e.matrix),function e(t,r=!1){!t||"Group"!==t.type&&"Object3D"!==t.type&&!0!==r||(s=s.premultiply(t.matrix),e(t.parent,t.isMesh&&t.parent&&t.parent.isMesh))}(e.parent,e.isMesh&&e.parent&&e.parent.isMesh),r=r.applyMatrix4(s));let a=new Vector3,l=new Quaternion,c=new Vector3;e.matrix.decompose(a,l,c);const p={x:a.x,y:a.y,z:a.z},h={qx:l.x,qy:l.y,qz:l.z,qw:l.w},f=e.userData.name?e.userData.name:e.name?e.name:"element_"+u,d=e.userData.info?e.userData.info:{Name:f},m=e.userData.type?e.userData.type:"Other";let y;const b=[];if(r.attributes.color){const t=r.attributes.color.array;if(3===r.attributes.color.itemSize){const r=e.material&&e.material.opacity?e.material.opacity:1;for(let e=0;e<t.length;e+=9)b.push(Math.round(255*t[e+0])),b.push(Math.round(255*t[e+1])),b.push(Math.round(255*t[e+2])),b.push(Math.round(255*r))}else for(let e=0;e<t.length;e+=12)b.push(Math.round(255*t[e+0])),b.push(Math.round(255*t[e+1])),b.push(Math.round(255*t[e+2])),b.push(Math.round(255*t[e+3]))}if(r.groups&&r.groups.length>1){y={r:255,g:255,b:255,a:255};for(const t of r.groups){let a,i;Array.isArray(e.material)&&e.material[t.materialIndex]?(a=e.material[t.materialIndex].color.clone(),i=e.material[t.materialIndex].opacity):(a=e.material.color.clone(),i=e.material.opacity);const o=r.attributes.position.count,n=t.count===1/0?o:t.start+t.count;for(let e=t.start;e<n;e+=3)b.push(Math.round(255*a.r)),b.push(Math.round(255*a.g)),b.push(Math.round(255*a.b)),b.push(Math.round(255*i))}}else if(r.index||(r=mergeVertices(r.clone())),e.material&&e.material.color||Array.isArray(e.material)&&1===e.material.length){let t,r;!0===Array.isArray(e.material)?(t=e.material[0].color.clone(),r=e.material[0].opacity):(t=e.material.color.clone(),r=e.material.opacity),y={r:Math.round(255*t.r),g:Math.round(255*t.g),b:Math.round(255*t.b),a:Math.round(255*r)}}else y={r:255,g:255,b:255,a:255};const M=r.index?["".concat(r.index.array)]:void 0,g=["".concat(r.attributes.position.array)],A=b.length>0?["".concat(b)]:void 0;n.meshes.push({mesh_id:u,coordinates:g,indices:M}),n.elements.push({mesh_id:u,vector:p,rotation:h,guid:t,type:m,color:y,face_colors:A,info:d}),r.dispose(),u++}})),0===u){if("function"==typeof r)return r("THREE.BIMExporter: No meshes found!"),null;throw new Error("THREE.BIMExporter: No meshes found!")}{let e=JSON.stringify(n);if(e=e.replaceAll('["',"[").replaceAll('"]',"]"),e=e.replaceAll('"{',"{").replaceAll('}"',"}"),e=e.replaceAll('"undefined"',"undefined"),"function"!=typeof t)return e;t(e)}}deinterleave(e,t="color"){const r=e.attributes[t],a=r.itemSize,i=r.offset,o=r.data;if(void 0===o)return[];let n=new InterleavedBufferAttribute(o,a,i),s=deinterleaveAttribute(n),u=Array(s.array.length);for(let e=0,t=s.array.length;e<t;e++)u[e]=isNaN(s.array[e])?0:s.array[e];return new BufferAttribute(new Float32Array(u),a)}interleaved_buffer_attribute_check(e){const t=["position","normal","color","tangent","uv","uv1","uv2","uv3"];for(const r of t)if(e.attributes[r]&&e.attributes[r].isInterleavedBufferAttribute){if(e.attributes[r].data&&e.attributes[r].data.array){let t=this.deinterleave(e,r);e.deleteAttribute(r),e.setAttribute(r,t)}}else if(e.attributes[r]&&e.attributes[r].array){const t=e.attributes[r].itemSize,a=e.attributes[r].array,i=Array(a.length);for(let e=0,t=a.length;e<t;e++)i[e]=isNaN(a[e])?0:a[e];e.deleteAttribute(r),e.setAttribute(r,new BufferAttribute(new Float32Array(i),t))}return e}}export{BIMExporter};