import{Matrix3,Vector3,Color}from"three";class PLYExporter{parse(t,e,r={}){function n(e){t.traverse((function(t){if(!0===t.isMesh||t.isPoints){const r=t,n=r.geometry;!0===n.hasAttribute("position")&&e(r,n)}}))}const o=(r=Object.assign({binary:!1,excludeAttributes:[],littleEndian:!1},r)).excludeAttributes;let l=!0,i=!1,a=!1,s=!1,u=0,f=0;t.traverse((function(t){if(!0===t.isMesh||t.isPoints){const e=t,r=e.geometry,n=r.getAttribute("position"),o=r.getAttribute("normal"),g=r.getAttribute("uv"),c=r.getAttribute("color"),p=r.getIndex();if(void 0===n)return;!0===t.isPoints&&(l=!1),u+=n.count,f+=p?p.count/3:n.count/3,void 0!==o&&(i=!0),!0===t.isMesh&&void 0!==g&&(s=!0),(void 0!==c||r.groups&&e.material&&!0===Array.isArray(e.material)&&r.groups.length<=e.material.length||r.groups&&1===r.groups.length&&e.material&&null===e.material.map||e.material&&e.material.color&&null===e.material.map)&&(a=!0)}}));const g=new Color;if(l=l&&-1===o.indexOf("index"),i=i&&-1===o.indexOf("normal"),a=a&&-1===o.indexOf("color"),s=s&&-1===o.indexOf("uv"),l&&f!==Math.floor(f))return null;let c=`ply\nformat ${r.binary?r.littleEndian?"binary_little_endian":"binary_big_endian":"ascii"} 1.0\nelement vertex ${u}\nproperty float x\nproperty float y\nproperty float z\n`;!0===i&&(c+="property float nx\nproperty float ny\nproperty float nz\n"),!0===s&&(c+="property float s\nproperty float t\n"),!0===a&&(c+="property uchar red\nproperty uchar green\nproperty uchar blue\n"),!0===l&&(c+=`element face ${f}\nproperty list uchar int vertex_index\n`),c+="end_header\n";const p=new Vector3,m=new Matrix3;let d=null;if(!0===r.binary){const t=(new TextEncoder).encode(c),e=u*(12+(i?12:0)+(a?3:0)+(s?8:0)),o=l?13*f:0,h=new DataView(new ArrayBuffer(t.length+e+o));new Uint8Array(h.buffer).set(t,0);let y=t.length,b=t.length+e,x=0;n((function(t,e){const n=e.getAttribute("position"),o=e.getAttribute("normal"),u=e.getAttribute("uv"),f=e.getAttribute("color"),c=e.getIndex();m.getNormalMatrix(t.matrixWorld);let d=0;for(let l=0,c=n.count;l<c;l++)if(p.fromBufferAttribute(n,l),p.applyMatrix4(t.matrixWorld),h.setFloat32(y,p.x,r.littleEndian),y+=4,h.setFloat32(y,p.y,r.littleEndian),y+=4,h.setFloat32(y,p.z,r.littleEndian),y+=4,!0===i&&(null!=o?(p.fromBufferAttribute(o,l),p.applyMatrix3(m).normalize(),h.setFloat32(y,p.x,r.littleEndian),y+=4,h.setFloat32(y,p.y,r.littleEndian),y+=4,h.setFloat32(y,p.z,r.littleEndian),y+=4):(h.setFloat32(y,0,r.littleEndian),y+=4,h.setFloat32(y,0,r.littleEndian),y+=4,h.setFloat32(y,0,r.littleEndian),y+=4)),!0===s&&(null!=u?(h.setFloat32(y,u.getX(l),r.littleEndian),y+=4,h.setFloat32(y,u.getY(l),r.littleEndian),y+=4):(h.setFloat32(y,0,r.littleEndian),y+=4,h.setFloat32(y,0,r.littleEndian),y+=4)),!0===a)if(null!=f)g.fromBufferAttribute(f,l).convertLinearToSRGB(),h.setUint8(y,Math.floor(255*g.r)),y+=1,h.setUint8(y,Math.floor(255*g.g)),y+=1,h.setUint8(y,Math.floor(255*g.b)),y+=1;else if(e.groups&&e.groups.length<=t.material.length&&t.material&&!0===Array.isArray(t.material)){e.groups[d].count!==1/0&&l===e.groups[d].start+e.groups[d].count-1&&d<e.groups.length-1&&(d+=1);const r=t.material[e.groups[d].materialIndex].color.clone().convertLinearToSRGB();h.setUint8(y,Math.floor(255*r.r)),y+=1,h.setUint8(y,Math.floor(255*r.g)),y+=1,h.setUint8(y,Math.floor(255*r.b)),y+=1}else if(t.material&&e.groups&&1===e.groups.length||t.material&&t.material.color){const e=t.material.color.clone().convertLinearToSRGB();h.setUint8(y,Math.floor(255*e.r)),y+=1,h.setUint8(y,Math.floor(255*e.g)),y+=1,h.setUint8(y,Math.floor(255*e.b)),y+=1}else h.setUint8(y,255),y+=1,h.setUint8(y,255),y+=1,h.setUint8(y,255),y+=1;if(!0===l)if(null!==c)for(let t=0,e=c.count;t<e;t+=3)h.setUint8(b,3),b+=1,h.setUint32(b,c.getX(t+0)+x,r.littleEndian),b+=4,h.setUint32(b,c.getX(t+1)+x,r.littleEndian),b+=4,h.setUint32(b,c.getX(t+2)+x,r.littleEndian),b+=4;else for(let t=0,e=n.count;t<e;t+=3)h.setUint8(b,3),b+=1,h.setUint32(b,x+t,r.littleEndian),b+=4,h.setUint32(b,x+t+1,r.littleEndian),b+=4,h.setUint32(b,x+t+2,r.littleEndian),b+=4;x+=n.count})),d=h.buffer}else{let t=0,e="",r="";n((function(n,o){const u=o.getAttribute("position"),c=o.getAttribute("normal"),d=o.getAttribute("uv"),h=o.getAttribute("color"),y=o.getIndex();m.getNormalMatrix(n.matrixWorld);for(let t=0,r=u.count;t<r;t++){p.fromBufferAttribute(u,t),p.applyMatrix4(n.matrixWorld);let r=p.x+" "+p.y+" "+p.z;if(!0===i&&(null!=c?(p.fromBufferAttribute(c,t),p.applyMatrix3(m).normalize(),r+=" "+p.x+" "+p.y+" "+p.z):r+=" 0 0 0"),!0===s&&(r+=null!=d?" "+d.getX(t)+" "+d.getY(t):" 0 0"),!0===a)if(null!=h)g.fromBufferAttribute(h,t).convertLinearToSRGB(),r+=" "+Math.floor(255*g.r)+" "+Math.floor(255*g.g)+" "+Math.floor(255*g.b);else if(o.groups&&n.material&&!0===Array.isArray(n.material)&&o.groups.length<=n.material.length){t===o.groups[j].start+o.groups[j].count-1&&j<o.groups.length-1&&(j+=1);const e=n.material[o.groups[j].materialIndex].color.clone().convertLinearToSRGB();r+=" "+Math.floor(255*e.r)+" "+Math.floor(255*e.g)+" "+Math.floor(255*e.b)}else if(o.groups&&n.material&&1===o.groups.length||n.material&&n.material.color){const t=n.material.color.clone().convertLinearToSRGB();r+=" "+Math.floor(255*t.r)+" "+Math.floor(255*t.g)+" "+Math.floor(255*t.b)}else r+=" 255 255 255";e+=r+"\n"}if(!0===l){if(null!==y)for(let e=0,n=y.count;e<n;e+=3)r+=`3 ${y.getX(e+0)+t}`,r+=` ${y.getX(e+1)+t}`,r+=` ${y.getX(e+2)+t}\n`;else for(let e=0,n=u.count;e<n;e+=3)r+=`3 ${t+e} ${t+e+1} ${t+e+2}\n`;f+=y?y.count/3:u.count/3}t+=u.count})),d=`${c}${e}${l?`${r}\n`:"\n"}`}return"function"==typeof e&&requestAnimationFrame((()=>e(d))),d}}export{PLYExporter};