import{BufferAttribute,DefaultLoadingManager,InterleavedBufferAttribute,Matrix4,Quaternion,Vector3}from"three";import{deinterleaveAttribute}from"three/addons/utils/BufferGeometryUtils.min.js";import*as rhino3dm from"https://cdn.jsdelivr.net/npm/rhino3dm@8.6.1/rhino3dm.module.min.js";async function import_decompress(){try{const{WebGLRenderer:e}=await import("three"),{decompress:t}=await import("https://cdn.jsdelivr.net/npm/three@0.169.0/examples/jsm/utils/TextureUtils.min.js");return{decompress:t,renderer:new e({antialias:!0})}}catch(e){}try{const{CanvasTexture:e,NodeMaterial:t,QuadMesh:a,WebGPURenderer:r}=await import("three"),{texture:i,uv:o}=await import("three/tsl"),s=new r({antialias:!0});await s.init();const n=new a;return{decompress:function(a,r=1/0,s=null){const l=a.clone();l.offset.set(0,0),l.repeat.set(1,1);const c=new t;c.fragmentNode=i(l,o().flipY());const p=Math.min(l.image.width,r),m=Math.min(l.image.height,r);s.setSize(p,m),s.outputColorSpace=l.colorSpace,n.material=c,n.render(s);const u=document.createElement("canvas"),d=u.getContext("2d");u.width=p,u.height=m,d.drawImage(s.domElement,0,0,p,m);const h=new e(u);return h.offset.set(a.offset.x,a.offset.y),h.repeat.set(a.repeat.x,a.repeat.y),h.colorSpace=a.colorSpace,h.minFilter=a.minFilter,h.magFilter=a.magFilter,h.wrapS=a.wrapS,h.wrapT=a.wrapT,h.name=a.name,l.dispose(),h},renderer:s}}catch(e){throw new Error("THREE.OBJExporter: Could not import decompress function!")}}class Rhino3dmExporter{constructor(e){this.manager=e||DefaultLoadingManager,this.decompress=null,this.renderer=null}parse(e,t,a,r={}){this.parseAsync(e,t,a,r)}async parseAsync(e,t,a,r={}){const i=this,{decompress:o,renderer:s}=await import_decompress();i.decompress=o,i.renderer=s;const n=await rhino3dm.default(),l=new n.File3dm,c={vertexColorsCorrection:0,exportLineSegments:!0,map_flip_required:!1,maxTextureSize:1/0};r=Object.assign(c,r);const p=Math.max(0,Math.min(128,r.vertexColorsCorrection)),m=r.exportLineSegments,u=r.map_flip_required,d=r.maxTextureSize;let h,y,g,f;const M={};let b=0,v=0;function S(e,t=!1){y=new n.Material,y.default(),e.name&&""!==e.name?y.name=e.name:y.name="material_"+b,e.color&&(y.diffuseColor={r:255*e.color.r,g:255*e.color.g,b:255*e.color.b,a:255},g.drawColor={r:255*e.color.r,g:255*e.color.g,b:255*e.color.b,a:255},g.plotColor={r:255*e.color.r,g:255*e.color.g,b:255*e.color.b,a:255}),e.emissive&&(y.emissionColor={r:255*e.emissive.r,g:255*e.emissive.g,b:255*e.emissive.b,a:255}),e.specular&&(y.specularColor={r:255*e.specular.r,g:255*e.specular.g,b:255*e.specular.b,a:255}),void 0!==e.opacity&&(!0===e.transparent?y.transparency=1===e.opacity?1e-4:1-e.opacity:y.transparency=1-e.opacity),void 0!==e.shininess&&(y.shine=e.shininess),void 0!==e.reflectivity&&(y.reflectivity=e.reflectivity),void 0!==e.flatShading&&(y.disableLighting=e.flatShading),void 0!==e.refractionFactor&&(y.indexOfRefraction=e.refractionFactor),(e.isMeshStandardMaterial||e.isMeshPhysicalMaterial||"MeshStandardMaterial"===e.type||"MeshPhysicalMaterial"===e.type)&&(y.toPhysicallyBased(),void 0!==e.metalness&&(y.physicallyBased().metallic=e.metalness),void 0!==e.roughness&&(y.physicallyBased().roughness=e.roughness),void 0!==e.sheen&&(y.physicallyBased().sheen=e.sheen),void 0!==e.thickness&&(y.physicallyBased().subsurface=e.thickness),void 0!==e.transmission&&(y.physicallyBased().opacity=1-e.transmission),e.color&&(y.physicallyBased().baseColor={r:255*e.color.r,g:255*e.color.g,b:255*e.color.b,a:255}),e.specularColor&&(y.specularColor={r:255*e.specularColor.r,g:255*e.specularColor.g,b:255*e.specularColor.b,a:255}),void 0!==e.specularIntensity&&(y.physicallyBased().specular=e.specularIntensity),void 0!==e.ior&&(y.indexOfRefraction=e.ior),void 0!==e.anisotropy&&(y.physicallyBased().anisotropic=e.anisotropy,void 0!==e.anisotropyRotation&&(y.physicallyBased().anisotropicRotation=e.anisotropyRotation)),void 0!==e.clearcoat&&(y.physicallyBased().clearcoat=e.clearcoat,void 0!==e.clearcoatRoughness&&(y.physicallyBased().clearcoatRoughness=e.clearcoatRoughness))),l.materials().add(y),g.materialSource=n.ObjectMaterialSource.MaterialFromObject,g.materialIndex=b;const a={};function r(e,t){""===e.name&&(e.name=t);let a={};if(a.type=t,a.uuid=e.uuid,a.center=e.center,a.offset=e.offset,a.repeat=e.repeat,a.rotation=e.rotation,a.minFilter=e.minFilter,a.magFilter=e.magFilter,a.mapping=e.mapping?e.mapping:300,e.wrapS&&(a.wrapU=1e3===e.wrapS?0:1),e.wrapT&&(a.wrapV=1e3===e.wrapT?0:1),a.image=t,!M[e.uuid]){!0===e.isCompressedTexture&&(e=i.decompress(e,d,i.renderer));const t=i.imageURLfromTexture(e,!0,d,u);t&&(M[a.uuid]=t)}g.setUserString(l.materials().get(b).id+"_"+t,JSON.stringify(a))}!0===t&&(a.isArrayMember=!0),a.side=e.side,a.depthTest=e.depthTest,void 0!==e.alphaTest&&e.alphaTest>0&&(a.alphaTest=e.alphaTest),void 0!==e.bumpScale&&1!==e.bumpScale&&(a.bumpScale=e.bumpScale),void 0!==e.emissiveIntensity&&1!==e.emissiveIntensity&&(a.emissiveIntensity=e.emissiveIntensity),void 0!==e.normalMapType&&0!==e.normalMapType&&(a.normalMapType=e.normalMapType),void 0!==e.normalScale&&(1!==e.normalScale.x&&(a.normalScaleX=e.normalScale.x),1!==e.normalScale.y&&(a.normalScaleY=e.normalScale.y)),void 0!==e.clearcoatNormalScale&&(1!==e.clearcoatNormalScale.x&&(a.clearcoatNormalScaleX=e.clearcoatNormalScale.x),1!==e.clearcoatNormalScale.y&&(a.clearcoatNormalScaleY=e.clearcoatNormalScale.y)),void 0!==e.iridescence&&(a.iridescence=e.iridescence),void 0!==e.iridescenceIOR&&(a.iridescenceIOR=e.iridescenceIOR),void 0!==e.iridescenceThicknessRange&&(a.iridescenceThicknessRangeX=e.iridescenceThicknessRange[0],a.iridescenceThicknessRangeY=e.iridescenceThicknessRange[1]),e.attenuationDistance&&e.attenuationDistance!==1/0&&(a.attenuationDistance=e.attenuationDistance),e.attenuationColor&&(a.attenuationColorR=255*e.attenuationColor.r,a.attenuationColorG=255*e.attenuationColor.g,a.attenuationColorB=255*e.attenuationColor.b),void 0!==e.sheenRoughness&&(a.sheenRoughness=e.sheenRoughness),e.sheenColor&&(a.sheenColorR=255*e.sheenColor.r,a.sheenColorG=255*e.sheenColor.g,a.sheenColorB=255*e.sheenColor.b),g.setUserString("params_"+l.materials().get(b).id,JSON.stringify(a)),e.isMeshStandardMaterial||e.isMeshPhysicalMaterial||"MeshStandardMaterial"===e.type||"MeshPhysicalMaterial"===e.type?(e.map&&r(e.map.clone(),"PBR_BaseColor"),e.aoMap&&r(e.aoMap.clone(),"PBR_AmbientOcclusion"),e.alphaMap&&r(e.alphaMap.clone(),"PBR_Alpha"),e.bumpMap&&r(e.bumpMap.clone(),"Bump"),e.emissiveMap&&r(e.emissiveMap.clone(),"PBR_Emission"),e.anisotropyMap&&r(e.anisotropyMap.clone(),"PBR_Anisotropic"),e.clearcoatMap&&r(e.clearcoatMap.clone(),"PBR_Clearcoat"),e.clearcoatNormalMap&&r(e.clearcoatNormalMap.clone(),"PBR_ClearcoatBump"),e.clearcoatRoughnessMap&&r(e.clearcoatRoughnessMap.clone(),"PBR_ClearcoatRoughness"),e.displacementMap&&r(e.displacementMap.clone(),"PBR_Displacement"),e.metalnessMap&&r(e.metalnessMap.clone(),"PBR_Metallic"),e.roughnessMap&&r(e.roughnessMap.clone(),"PBR_Roughness"),e.sheenColorMap&&r(e.sheenColorMap.clone(),"PBR_Sheen"),e.specularColorMap&&r(e.specularColorMap.clone(),"PBR_Specular"),e.transmissionMap&&r(e.transmissionMap.clone(),"Opacity"),e.thicknessMap&&r(e.thicknessMap.clone(),"PBR_Subsurface"),e.normalMap&&r(e.normalMap.clone(),"PBR_Other_Normal"),e.anisotropyMap&&r(e.anisotropyMap.clone(),"PBR_Other_Anisotropy"),e.iridescenceMap&&r(e.iridescenceMap.clone(),"PBR_Other_Iridescence"),e.iridescenceThicknessMap&&r(e.iridescenceThicknessMap.clone(),"PBR_Other_IridescenceThickness"),e.sheenColorMap&&r(e.sheenColorMap.clone(),"PBR_Other_SheenColor"),e.sheenRoughnessMap&&r(e.sheenRoughnessMap.clone(),"PBR_Other_SheenRoughness"),e.specularIntensityMap&&r(e.specularIntensityMap.clone(),"PBR_Other_SpecularIntensity")):(e.map&&r(e.map.clone(),"Diffuse"),e.alphaMap&&r(e.alphaMap.clone(),"Transparency"),e.bumpMap&&r(e.bumpMap.clone(),"Bump"),e.envMap&&r(e.envMap.clone(),"Emap")),b++}if(e.traverse((function(e){if(e.isMesh||e.isPoints||e.isLine||e.isLineSegments){g=new n.ObjectAttributes,f=i.interleaved_buffer_attribute_check(e.geometry.clone());const t=new Matrix4;t.copy(e.matrixWorld);const a=new Vector3,r=new Quaternion,o=new Vector3;t.decompose(a,r,o);const s=(new Matrix4).compose(a,r,o);f.applyMatrix4(s),f.groups&&f.groups.length>1&&g.setUserString("geometry_groups",JSON.stringify(f.groups))}if(e.isMesh||e.isLine||e.isLineSegments){if(e.isMesh)h=new n.Mesh.createFromThreejsJSON({data:f});else if((e.isLine||e.isLineSegments)&&!0===m){const e=new n.Point3dList;for(let t=0;t<f.attributes.position.array.length;t+=3)e.add(f.attributes.position.array[t],f.attributes.position.array[t+1],f.attributes.position.array[t+2]);h=new n.PolylineCurve(e)}if(f.attributes&&f.attributes.color){let t=f.attributes.color.array,a=new Uint8Array(f.attributes.color.array.length);for(let e=0;e<a.length;e++){let r=Math.max(-1,Math.min(1,t[e]));r=r<0?32768*r:32767*r,r/=256,a[e]=r+p}if(e.isLine||e.isLineSegments){if(!0===m){let e="";for(let t=0;t<a.length;t+=f.attributes.color.itemSize)e+=a[t]+","+a[t+1]+","+a[t+2]+",";g.setUserString("colors",e.slice(0,-1))}}else for(let e=0;e<a.length;e+=f.attributes.color.itemSize)h.vertexColors().add(a[e],a[e+1],a[e+2])}if(!1===m)if(Array.isArray(e.material))for(const t of e.material)e.isMesh&&(S(t,e.material.length>1),l.objects().add(h,g));else e.isMesh&&(S(e.material),l.objects().add(h,g));else{if(Array.isArray(e.material))for(const t of e.material)S(t,e.material.length>1);else S(e.material);l.objects().add(h,g)}}else if(e.isPoints){if(h=new n.PointCloud,f.attributes&&f.attributes.color){let e=f.attributes.color.array,t=new Uint8Array(f.attributes.color.array.length);for(let a=0;a<t.length;a++){let r=Math.max(-1,Math.min(1,e[a]));r=r<0?32768*r:32767*r,r/=256,t[a]=r+p}let a=f.attributes.position.array;for(let e=0;e<t.length;e+=f.attributes.color.itemSize){let r=[a[e],a[e+1],a[e+2]],i={r:t[e],g:t[e+1],b:t[e+2],a:255},o=h.insertNew(v);o.location=r,o.color=i,v++}}else{let e=new n.Material;if(e.default(),material.name&&""!==material.name?e.name=material.name:e.name="material_"+b,material.color){let t={r:255*material.color.r,g:255*material.color.g,b:255*material.color.b,a:255},a=f.attributes.position.array;for(let e=0;e<a.length;e+=f.attributes.position.itemSize){let r=[a[e],a[e+1],a[e+2]],i=h.insertNew(v);i.location=r,i.color=t,v++}e.diffuseColor=t}material.opacity&&(e.transparency=1-material.opacity),l.materials().add(e),g.materialSource=n.ObjectMaterialSource.MaterialFromObject,g.materialIndex=b,b++}l.objects().add(h,g)}})),null!==i.renderer&&(i.renderer.dispose(),i.renderer=null),0===b&&0===v){if("function"==typeof a)return a("THREE.3DMExporter: No qualifying objects found!"),null;throw new Error("THREE.3DMExporter: No qualifying objects found!")}if(Object.keys(M).forEach((e=>{l.strings().set(e,M[e])})),"function"!=typeof t)return l.toByteArray();t(l.toByteArray())}deinterleave(e,t="color"){const a=e.attributes[t],r=a.itemSize,i=a.offset,o=a.data;if(void 0===o)return[];let s=new InterleavedBufferAttribute(o,r,i),n=deinterleaveAttribute(s),l=Array(n.array.length);for(let e=0,t=n.array.length;e<t;e++)l[e]=isNaN(n.array[e])?0:n.array[e];return new BufferAttribute(new Float32Array(l),r)}interleaved_buffer_attribute_check(e){const t=["position","normal","color","tangent","uv","uv1","uv2","uv3"];for(const a of t)if(e.attributes[a]&&e.attributes[a].isInterleavedBufferAttribute){if(e.attributes[a].data&&e.attributes[a].data.array){let t=this.deinterleave(e,a);e.deleteAttribute(a),e.setAttribute(a,t)}}else if(e.attributes[a]&&e.attributes[a].array){const t=e.attributes[a].itemSize,r=e.attributes[a].array,i=Array(r.length);for(let e=0,t=r.length;e<t;e++)i[e]=isNaN(r[e])?0:r[e];e.deleteAttribute(a),e.setAttribute(a,new BufferAttribute(new Float32Array(i),t))}return e}imageURLfromTexture(e,t=!0,a,r=!1){const i=e.image;if(void 0!==i){if(/^data:/i.test(i.src)&&a===1/0&&!1===r)return i.src;const e=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");let o=Math.min(2560,a)/Math.max(i.width,i.height);e.width=i.width*Math.min(1,o),e.height=i.height*Math.min(1,o);const s=e.getContext("2d");if(!0===r&&(s.translate(0,e.height),s.scale(1,-1)),i instanceof ImageData)s.putImageData(i,0,0);else if(i.data&&i.data.constructor===Uint8Array){let e=new ImageData(new Uint8ClampedArray(i.data),i.width,i.height);s.putImageData(e,0,0)}else s.drawImage(i,0,0,e.width,e.height);return(e.width>2048||e.height>2048)&&!t?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}return null}}export{Rhino3dmExporter};