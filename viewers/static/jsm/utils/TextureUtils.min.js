import{PlaneGeometry,ShaderMaterial,Uniform,Mesh,PerspectiveCamera,Scene,WebGLRenderer,CanvasTexture,SRGBColorSpace}from"three";let _renderer,fullscreenQuadGeometry,fullscreenQuadMaterial,fullscreenQuad;export function decompress(e,t=1/0,r=null){fullscreenQuadGeometry||(fullscreenQuadGeometry=new PlaneGeometry(2,2,1,1)),fullscreenQuadMaterial||(fullscreenQuadMaterial=new ShaderMaterial({uniforms:{blitTexture:new Uniform(e)},vertexShader:"\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main(){\n\t\t\t\tvUv = uv;\n\t\t\t\tgl_Position = vec4(position.xy * 1.0,0.,.999999);\n\t\t\t}",fragmentShader:"\n\t\t\tuniform sampler2D blitTexture; \n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main(){ \n\t\t\t\tgl_FragColor = vec4(vUv.xy, 0, 1);\n\t\t\t\t\n\t\t\t\t#ifdef IS_SRGB\n\t\t\t\tgl_FragColor = LinearTosRGB( texture2D( blitTexture, vUv) );\n\t\t\t\t#else\n\t\t\t\tgl_FragColor = texture2D( blitTexture, vUv);\n\t\t\t\t#endif\n\t\t\t}"})),fullscreenQuadMaterial.uniforms.blitTexture.value=e,fullscreenQuadMaterial.defines.IS_SRGB=e.colorSpace==SRGBColorSpace,fullscreenQuadMaterial.needsUpdate=!0,fullscreenQuad||(fullscreenQuad=new Mesh(fullscreenQuadGeometry,fullscreenQuadMaterial),fullscreenQuad.frustrumCulled=!1);const n=new PerspectiveCamera,a=new Scene;a.add(fullscreenQuad),null===r&&(r=_renderer=new WebGLRenderer({antialias:!1}));const l=Math.min(e.image.width,t),i=Math.min(e.image.height,t);r.setSize(l,i),r.clear(),r.render(a,n);const u=document.createElement("canvas"),d=u.getContext("2d");u.width=l,u.height=i,d.drawImage(r.domElement,0,0,l,i);const o=new CanvasTexture(u);return o.minFilter=e.minFilter,o.magFilter=e.magFilter,o.wrapS=e.wrapS,o.wrapT=e.wrapT,o.name=e.name,_renderer&&(_renderer.forceContextLoss(),_renderer.dispose(),_renderer=null),o}