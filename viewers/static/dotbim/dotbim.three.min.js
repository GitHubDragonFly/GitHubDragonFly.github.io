const scale=new THREE.Vector3(1,1,1),mesh_id_keys={};function dotbim_CreateMeshes(dotbim){if(void 0===dotbim)return void console.log("No BIM model provided!");if("string"!=typeof dotbim)return console.log("Unknown file format!"),[];dotbim=JSON.parse(dotbim);const{schema_version:schema_version,meshes:meshes,elements:elements,info:info}=dotbim;if(!meshes||!elements)return console.log("No meshes or elements found!"),[];elements.forEach(element=>{if(mesh_id_keys[element.mesh_id]||(mesh_id_keys[element.mesh_id]={face_colors_group:{},color_group:{}}),element.face_colors){let mesh_id_key=mesh_id_keys[element.mesh_id].face_colors_group[element.face_colors];mesh_id_key?mesh_id_key.instance_count++:mesh_id_keys[element.mesh_id].face_colors_group[element.face_colors]={instance_count:1,current_instance:0,mesh:null}}else{let el_color=[element.color.r,element.color.g,element.color.b,element.color.a],mesh_id_key=mesh_id_keys[element.mesh_id].color_group[el_color];mesh_id_key?mesh_id_key.instance_count++:mesh_id_keys[element.mesh_id].color_group[el_color]={instance_count:1,current_instance:0,mesh:null}}});let geometrys=dotbim_Meshes2Geometrys(meshes);const bim_meshes=new THREE.Group;return dotbim_Elemments2Meshes(elements,geometrys).forEach(bim_mesh=>{bim_mesh.name="mesh_"+bim_mesh.id,bim_meshes.add(bim_mesh)}),bim_meshes.children.length>1&&bim_meshes.rotateX(-Math.PI/2),bim_meshes}function dotbim_Elemments2Meshes(elements,geometrys){return elements.map(element=>dotbim_Elemment2Mesh(element,geometrys))}function dotbim_Elemment2Mesh(element,geometrys){let{mesh_id:mesh_id,vector:vector,rotation:rotation,guid:guid,type:type,color:color,face_colors:face_colors,info:info}=element,geometry=geometrys[mesh_id].clone();geometry.computeVertexNormals();let material=new THREE.MeshStandardMaterial({side:THREE.DoubleSide,flatShading:!1,transparent:!0,metalnes:.8,roughness:.3,color:16777215}),mesh;if(color&&0===color.r&&0===color.g&&0===color.b&&0===color.a&&(color=null),face_colors){let colors=createFaceColors(face_colors);geometry.setAttribute("color",new THREE.Float32BufferAttribute(colors,4))}else color&&(geometry.deleteAttribute("color"),material.color=convertTHREEColorRGB(color.r,color.g,color.b),material.opacity=convertColorAlpha(color.a),material.transparent=material.opacity<1,material.needsUpdate=!0);if(geometry.getAttribute("color")&&(material.color.setRGB(1,1,1),material.opacity=1,material.transparent=!0,material.vertexColors=!0,material.needsUpdate=!0),vector||(vector={x:0,y:0,z:0}),rotation||(rotation={qx:0,qy:0,qz:0,qw:1}),face_colors&&mesh_id_keys[mesh_id].face_colors_group[face_colors]){let mesh_id_key=mesh_id_keys[mesh_id].face_colors_group[face_colors];null===mesh_id_key.mesh&&(mesh_id_key.mesh=new THREE.InstancedMesh(geometry,material,mesh_id_key.instance_count)),mesh=mesh_id_key.mesh;let pos=new THREE.Vector3(vector.x,vector.y,vector.z),rotq=new THREE.Quaternion(rotation.qx,rotation.qy,rotation.qz,rotation.qw),matrix=(new THREE.Matrix4).compose(pos,rotq,scale);mesh.setMatrixAt(mesh_id_key.current_instance,matrix),mesh.instanceMatrix.needsUpdate=!0,mesh_id_key.current_instance++}else{let el_color=[color.r,color.g,color.b,color.a],mesh_id_key=mesh_id_keys[mesh_id].color_group[el_color];null===mesh_id_key.mesh&&(mesh_id_key.mesh=new THREE.InstancedMesh(geometry,material,mesh_id_key.instance_count)),mesh=mesh_id_key.mesh;let pos=new THREE.Vector3(vector.x,vector.y,vector.z),rotq=new THREE.Quaternion(rotation.qx,rotation.qy,rotation.qz,rotation.qw),matrix=(new THREE.Matrix4).compose(pos,rotq,scale);mesh.setMatrixAt(mesh_id_key.current_instance,matrix),mesh.instanceMatrix.needsUpdate=!0,mesh.setColorAt(mesh_id_key.current_instance,material.color),mesh.instanceColor.needsUpdate=!0,mesh_id_key.current_instance++}return mesh}function dotbim_Meshes2Geometrys(meshes){return meshes.map(mesh=>dotbim_Mesh2GeometryColor(mesh))}function dotbim_Mesh2GeometryColor(mesh){const{mesh_id:mesh_id,coordinates:coordinates,indices:indices,colors:colors}=mesh;let geometry=new THREE.BufferGeometry;return geometry.setIndex(indices),geometry.setAttribute("position",new THREE.Float32BufferAttribute(coordinates,3)),geometry=geometry.toNonIndexed(),colors&&(buffer_colors=createFaceColors(colors,3,4*indices.length),geometry.setAttribute("color",new THREE.Float32BufferAttribute(buffer_colors,4))),geometry.computeVertexNormals(),geometry}function createFaceColors(color4arrary,repeat=3,max=0){let colors=[];for(let index=0;index<color4arrary.length;index+=4){let c1=color4arrary[index+0],c2=color4arrary[index+1],c3=color4arrary[index+2],c4=convertColorAlpha(color4arrary[index+3]);var color=convertTHREEColorRGB(c1,c2,c3);for(let i=0;i<repeat;i++)colors.push(color.r,color.g,color.b,c4)}for(;colors.length<max;)for(let i=0;i<repeat;i++)colors.push(colors[0],colors[1],colors[2],colors[3]);return colors}function convertTHREEColorRGB(r,g,b){return new THREE.Color(r/255,g/255,b/255)}function convertColorAlpha(alpha){return alpha/255}