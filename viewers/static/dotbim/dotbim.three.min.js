const scale=new THREE.Vector3(1,1,1),mesh_id_keys={};function dotbim_CreateMeshes(e){if(void 0===e)return;if("string"!=typeof e)return[];e=JSON.parse(e);const{schema_version:t,meshes:o,elements:r,info:n}=e;if(!o||!r)return[];r.forEach((e=>{if(mesh_id_keys[e.mesh_id]||(mesh_id_keys[e.mesh_id]={face_colors_group:{},color_group:{}}),e.face_colors){let t=mesh_id_keys[e.mesh_id].face_colors_group[e.face_colors];t?t.instance_count++:mesh_id_keys[e.mesh_id].face_colors_group[e.face_colors]={instance_count:1,current_instance:0,mesh:null}}else{let t=[e.color.r,e.color.g,e.color.b,e.color.a],o=mesh_id_keys[e.mesh_id].color_group[t];o?o.instance_count++:mesh_id_keys[e.mesh_id].color_group[t]={instance_count:1,current_instance:0,mesh:null}}}));let s=dotbim_Meshes2Geometrys(o);const c=new THREE.Group;return c.userData.schema_version=t||{},c.userData.info=n||{},n.Name&&""!==n.Name&&(c.name=n.Name),dotbim_Elemments2Meshes(r,s).forEach((e=>{c.add(e)})),c.children.length>1&&c.rotateX(-Math.PI/2),c}function dotbim_Elemments2Meshes(e,t){return e.map((e=>dotbim_Elemment2Mesh(e,t)))}function dotbim_Elemment2Mesh(e,t){let o,{mesh_id:r,vector:n,rotation:s,guid:c,type:a,color:i,face_colors:l,info:_}=e;if(t[r])o=t[r].clone();else{for(const e of t)if(e.userData.mesh_id===r){o=e.clone();break}if(!o)return null}let u=_&&_.Name?_.Name:"";o.computeVertexNormals();let m,d=new THREE.MeshStandardMaterial({name:_&&_.Material?_.Material:"__DEFAULT",side:THREE.DoubleSide,flatShading:!1,transparent:!0,metalness:.4,roughness:.6,color:16777215});if(i&&0===i.r&&0===i.g&&0===i.b&&0===i.a&&(i=null),l&&l.length>0){o.index&&(o=o.toNonIndexed()),o.hasAttribute("color")&&o.deleteAttribute("color");const e=createFaceColors(l,3,4*o.attributes.position.count);o.setAttribute("color",new THREE.Float32BufferAttribute(e,4)),d.color.setRGB(1,1,1),d.opacity=1,d.transparent=!0,d.vertexColors=!0}else i&&(d.color=new THREE.Color(i.r/255,i.g/255,i.b/255,THREE.SRGBColorSpace),d.opacity=i.a/255,d.transparent=d.opacity<1);if(n||(n={x:0,y:0,z:0}),s||(s={qx:0,qy:0,qz:0,qw:1}),l&&mesh_id_keys[r].face_colors_group[l]){let e=mesh_id_keys[r].face_colors_group[l];null===e.mesh&&(e.mesh=new THREE.InstancedMesh(o,d,e.instance_count)),m=e.mesh;let t=new THREE.Vector3(n.x,n.y,n.z),i=new THREE.Quaternion(s.qx,s.qy,s.qz,s.qw),h=(new THREE.Matrix4).compose(t,i,scale);m.setMatrixAt(e.current_instance,h),m.instanceMatrix.needsUpdate=!0,""===u&&(u="mesh_"+r+"_"+m.id+"_"+e.current_instance),m.userData[e.current_instance]={name:u,guid:c||{},type:a||{},info:_||{}},e.current_instance++}else{let e=[i.r,i.g,i.b,i.a],t=mesh_id_keys[r].color_group[e];null===t.mesh&&(t.mesh=new THREE.InstancedMesh(o,d,t.instance_count)),m=t.mesh;let l=new THREE.Vector3(n.x,n.y,n.z),h=new THREE.Quaternion(s.qx,s.qy,s.qz,s.qw),f=(new THREE.Matrix4).compose(l,h,scale);m.setMatrixAt(t.current_instance,f),m.instanceMatrix.needsUpdate=!0,m.setColorAt(t.current_instance,d.color),m.instanceColor.needsUpdate=!0,""===u&&(u="mesh_"+r+"_"+m.id+"_"+t.current_instance),m.userData[t.current_instance]={name:u,guid:c||{},type:a||{},info:_||{}},t.current_instance++}return m}function dotbim_Meshes2Geometrys(e){return e.map((e=>dotbim_Mesh2GeometryColor(e)))}function dotbim_Mesh2GeometryColor(e){const{mesh_id:t,coordinates:o,indices:r,colors:n}=e;let s=new THREE.BufferGeometry;if(s.setAttribute("position",new THREE.Float32BufferAttribute(o,3)),s.computeVertexNormals(),n){const e=createFaceColors(n,3,4*s.attributes.position.count);s.setAttribute("color",new THREE.Float32BufferAttribute(e,4))}else r&&s.setIndex(r);return s.userData.mesh_id=t,s}function createFaceColors(e,t=3,o=0){let r=[];for(let o=0;o<e.length;o+=4){let n=e[o+0]/255,s=e[o+1]/255,c=e[o+2]/255,a=e[o+3]/255;for(let e=0;e<t;e++)r.push(n,s,c,a)}for(;r.length<o;)for(let e=0;e<t;e++)r.push(r[0],r[1],r[2],r[3]);return r}