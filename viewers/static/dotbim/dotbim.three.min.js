function dotbim_CreateMeshes(dotbim){if(void 0===dotbim)return void console.log("No BIM model provided!");if("string"!=typeof dotbim)return console.log("Unknown file format!"),[];dotbim=JSON.parse(dotbim);const{schema_version:schema_version,meshes:meshes,elements:elements,info:info}=dotbim;if(!meshes||!elements)return console.log("No meshes or elements found!"),[];const geometrys=dotbim_Meshes2Geometrys(meshes);return dotbim_Elemments2Meshes(elements,geometrys)}function dotbim_Elemments2Meshes(elements,geometrys){return elements.map(element=>dotbim_Elemment2Mesh(element,geometrys))}function dotbim_Elemment2Mesh(element,geometrys){let{mesh_id:mesh_id,vector:vector,rotation:rotation,guid:guid,type:type,color:color,face_colors:face_colors,info:info}=element,geometry=geometrys[mesh_id];geometry.computeVertexNormals();let material=new THREE.MeshPhongMaterial({side:THREE.DoubleSide,flatShading:!1,transparent:!0});if(color&&0===color.r&0===color.g&0===color.b&0===color.a&&(color=null),face_colors){let colors=createFaceColors(face_colors);geometry.setAttribute("color",new THREE.Float32BufferAttribute(colors,4))}geometry.getAttribute("color")&&(material.color=void 0,material.opacity=1,material.transparent=!0,material.vertexColors=!0),color&&(face_colors||(geometry.deleteAttribute("color"),material.vertexColors=!1),material.color=convertTHREEColorRGB(color.r,color.g,color.b),material.opacity=convertColorAlpha(color.a)),vector||(vector={x:0,y:0,z:0}),rotation||(rotation={qx:0,qy:0,qz:0,qw:1});const mesh=new THREE.Mesh(geometry,material);mesh.position.set(vector.x,vector.y,vector.z),mesh.quaternion.set(rotation.qx,rotation.qy,rotation.qz,rotation.qw);let innerGeometry=new THREE.BufferGeometry;innerGeometry.setAttribute("position",mesh.geometry.attributes.position);let innerEdgesGeometry=new THREE.EdgesGeometry(innerGeometry,30),outline_material=new THREE.LineBasicMaterial({color:16711680}),edges=new THREE.LineSegments(innerEdgesGeometry,outline_material);return edges.position.set(vector.x,vector.y,vector.z),edges.quaternion.set(rotation.qx,rotation.qy,rotation.qz,rotation.qw),mesh.edges=edges,mesh.geometry.computeBoundingBox(),mesh.geometry.computeBoundingSphere(),mesh}function dotbim_Meshes2Geometrys(meshes){return meshes.map(mesh=>dotbim_Mesh2GeometryColor(mesh))}function dotbim_Mesh2GeometryColor(mesh){const{mesh_id:mesh_id,coordinates:coordinates,indices:indices,colors:colors}=mesh;let geometry=new THREE.BufferGeometry;return geometry.id=mesh_id,geometry.setIndex(indices),geometry.setAttribute("position",new THREE.Float32BufferAttribute(coordinates,3)),geometry=geometry.toNonIndexed(),colors&&(buffer_colors=createFaceColors(colors,3,4*indices.length),geometry.setAttribute("color",new THREE.Float32BufferAttribute(buffer_colors,4))),geometry.computeVertexNormals(),geometry}function dotbim_Mesh2Geometry(mesh){const{mesh_id:mesh_id,coordinates:coordinates,indices:indices}=mesh,geometry=new THREE.BufferGeometry;return geometry.id=mesh_id,geometry.setIndex(indices),geometry.setAttribute("position",new THREE.Float32BufferAttribute(coordinates,3)),geometry.computeVertexNormals(),geometry}function createFaceColors(color4arrary,repeat=3,max=0){let colors=[];for(let index=0;index<color4arrary.length;index+=4){let c1=color4arrary[index+0],c2=color4arrary[index+1],c3=color4arrary[index+2],c4=convertColorAlpha(color4arrary[index+3]);var color=convertTHREEColorRGB(c1,c2,c3);for(let i=0;i<repeat;i++)colors.push(color.r,color.g,color.b,c4)}for(;colors.length<max;)for(let i=0;i<repeat;i++)colors.push(colors[0],colors[1],colors[2],colors[3]);return colors}function convertTHREEColorRGB(r,g,b){return new THREE.Color(`rgb(${r}, ${g}, ${b})`)}function convertColorAlpha(alpha){return alpha/255}