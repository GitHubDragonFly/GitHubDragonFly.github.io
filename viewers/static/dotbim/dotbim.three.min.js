const scale=new THREE.Vector3(1,1,1),mesh_id_keys={};function dotbim_CreateMeshes(e){if(void 0===e)return;if("string"!=typeof e)return[];e=JSON.parse(e);const{schema_version:t,meshes:o,elements:n,info:r}=e;if(!o||!n)return[];for(const e of n)if(mesh_id_keys[e.mesh_id]||(mesh_id_keys[e.mesh_id]={face_colors_group:{},color_group:{}}),e.face_colors){let t=mesh_id_keys[e.mesh_id].face_colors_group[e.face_colors];t?t.instance_count++:mesh_id_keys[e.mesh_id].face_colors_group[e.face_colors]={instance_count:1,current_instance:0,mesh:null}}else{if(!e.color)continue;let t=[e.color.r,e.color.g,e.color.b,e.color.a],o=mesh_id_keys[e.mesh_id].color_group[t];o?o.instance_count++:mesh_id_keys[e.mesh_id].color_group[t]={instance_count:1,current_instance:0,mesh:null}}let s=dotbim_Meshes2Geometrys(o);const c=new THREE.Group;return c.userData.schema_version=t||{},c.userData.info=r||{},r.Name&&""!==r.Name&&(c.name=r.Name),dotbim_Elemments2Meshes(n,s).forEach((e=>{e&&c.add(e)})),0===c.children.length?[]:(c.children.length>1&&c.rotateX(-Math.PI/2),c)}function dotbim_Elemments2Meshes(e,t){return e.map((e=>dotbim_Elemment2Mesh(e,t)))}function dotbim_Elemment2Mesh(e,t){let o,{mesh_id:n,vector:r,rotation:s,guid:c,type:i,color:a,face_colors:l,info:u}=e;if(t[n])o=t[n].clone();else{for(const e of t)if(e.userData.mesh_id===n){o=e.clone();break}if(!o)return null}let _=u&&u.Name?u.Name:"";o.computeVertexNormals();let m,d=new THREE.MeshStandardMaterial({name:u&&u.Material?u.Material:"__DEFAULT",side:THREE.DoubleSide,flatShading:!1,transparent:!0,metalness:.4,roughness:.6,color:16777215});if(a&&0===a.r&&0===a.g&&0===a.b&&0===a.a&&(a=null),l&&l.length>0){o.index&&(o=o.toNonIndexed()),o.hasAttribute("color")&&o.deleteAttribute("color");const e=createFaceColors(l,3,4*o.attributes.position.count);o.setAttribute("color",new THREE.Float32BufferAttribute(e,4)),d.color.setRGB(1,1,1),d.opacity=1,d.transparent=!0,d.vertexColors=!0}else a&&(d.color=new THREE.Color(a.r/255,a.g/255,a.b/255,THREE.SRGBColorSpace),d.opacity=a.a/255,d.transparent=d.opacity<1);if(r||(r={x:0,y:0,z:0}),s||(s={qx:0,qy:0,qz:0,qw:1}),l&&mesh_id_keys[n].face_colors_group[l]){let e=mesh_id_keys[n].face_colors_group[l];null===e.mesh&&(e.mesh=new THREE.InstancedMesh(o,d,e.instance_count)),m=e.mesh;let t=new THREE.Vector3(r.x,r.y,r.z),a=new THREE.Quaternion(s.qx,s.qy,s.qz,s.qw),h=(new THREE.Matrix4).compose(t,a,scale);m.setMatrixAt(e.current_instance,h),m.instanceMatrix.needsUpdate=!0,""===_&&(_="mesh_"+n+"_"+m.id+"_"+e.current_instance),m.userData[e.current_instance]={name:_,guid:c||{},type:i||{},info:u||{}},e.current_instance++}else{if(!a)return;let e=[a.r,a.g,a.b,a.a],t=mesh_id_keys[n].color_group[e];null===t.mesh&&(t.mesh=new THREE.InstancedMesh(o,d,t.instance_count)),m=t.mesh;let l=new THREE.Vector3(r.x,r.y,r.z),h=new THREE.Quaternion(s.qx,s.qy,s.qz,s.qw),f=(new THREE.Matrix4).compose(l,h,scale);m.setMatrixAt(t.current_instance,f),m.instanceMatrix.needsUpdate=!0,m.setColorAt(t.current_instance,d.color),m.instanceColor.needsUpdate=!0,""===_&&(_="mesh_"+n+"_"+m.id+"_"+t.current_instance),m.userData[t.current_instance]={name:_,guid:c||{},type:i||{},info:u||{}},t.current_instance++}return m}function dotbim_Meshes2Geometrys(e){return e.map((e=>dotbim_Mesh2GeometryColor(e)))}function dotbim_Mesh2GeometryColor(e){const{mesh_id:t,coordinates:o,indices:n,colors:r}=e;let s=new THREE.BufferGeometry;if(s.setAttribute("position",new THREE.Float32BufferAttribute(o,3)),s.computeVertexNormals(),r){const e=createFaceColors(r,3,4*s.attributes.position.count);s.setAttribute("color",new THREE.Float32BufferAttribute(e,4))}else n&&s.setIndex(n);return s.userData.mesh_id=t,s}function createFaceColors(e,t=3,o=0){let n=[];for(let o=0;o<e.length;o+=4){let r=e[o+0]/255,s=e[o+1]/255,c=e[o+2]/255,i=e[o+3]/255;for(let e=0;e<t;e++)n.push(r,s,c,i)}for(;n.length<o;)for(let e=0;e<t;e++)n.push(n[0],n[1],n[2],n[3]);return n}